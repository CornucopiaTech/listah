// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: listah/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserService_CreateOne_FullMethodName  = "/listah.v1.UserService/CreateOne"
	UserService_CreateMany_FullMethodName = "/listah.v1.UserService/CreateMany"
	UserService_ReadOne_FullMethodName    = "/listah.v1.UserService/ReadOne"
	UserService_ReadMany_FullMethodName   = "/listah.v1.UserService/ReadMany"
	UserService_UpdateOne_FullMethodName  = "/listah.v1.UserService/UpdateOne"
	UserService_UpdateMany_FullMethodName = "/listah.v1.UserService/UpdateMany"
	UserService_DeleteOne_FullMethodName  = "/listah.v1.UserService/DeleteOne"
	UserService_DeleteMany_FullMethodName = "/listah.v1.UserService/DeleteMany"
	UserService_Echo_FullMethodName       = "/listah.v1.UserService/Echo"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateOne(ctx context.Context, in *UserServiceCreateOneRequest, opts ...grpc.CallOption) (*UserServiceCreateOneResponse, error)
	CreateMany(ctx context.Context, in *UserServiceCreateManyRequest, opts ...grpc.CallOption) (*UserServiceCreateManyResponse, error)
	ReadOne(ctx context.Context, in *UserServiceReadOneRequest, opts ...grpc.CallOption) (*UserServiceReadOneResponse, error)
	ReadMany(ctx context.Context, in *UserServiceReadManyRequest, opts ...grpc.CallOption) (*UserServiceReadManyResponse, error)
	UpdateOne(ctx context.Context, in *UserServiceUpdateOneRequest, opts ...grpc.CallOption) (*UserServiceUpdateOneResponse, error)
	UpdateMany(ctx context.Context, in *UserServiceUpdateManyRequest, opts ...grpc.CallOption) (*UserServiceUpdateManyResponse, error)
	DeleteOne(ctx context.Context, in *UserServiceDeleteOneRequest, opts ...grpc.CallOption) (*UserServiceDeleteOneResponse, error)
	DeleteMany(ctx context.Context, in *UserServiceDeleteManyRequest, opts ...grpc.CallOption) (*UserServiceDeleteManyResponse, error)
	Echo(ctx context.Context, in *UserServiceEchoRequest, opts ...grpc.CallOption) (*UserServiceEchoResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateOne(ctx context.Context, in *UserServiceCreateOneRequest, opts ...grpc.CallOption) (*UserServiceCreateOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceCreateOneResponse)
	err := c.cc.Invoke(ctx, UserService_CreateOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateMany(ctx context.Context, in *UserServiceCreateManyRequest, opts ...grpc.CallOption) (*UserServiceCreateManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceCreateManyResponse)
	err := c.cc.Invoke(ctx, UserService_CreateMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReadOne(ctx context.Context, in *UserServiceReadOneRequest, opts ...grpc.CallOption) (*UserServiceReadOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceReadOneResponse)
	err := c.cc.Invoke(ctx, UserService_ReadOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReadMany(ctx context.Context, in *UserServiceReadManyRequest, opts ...grpc.CallOption) (*UserServiceReadManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceReadManyResponse)
	err := c.cc.Invoke(ctx, UserService_ReadMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateOne(ctx context.Context, in *UserServiceUpdateOneRequest, opts ...grpc.CallOption) (*UserServiceUpdateOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceUpdateOneResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateMany(ctx context.Context, in *UserServiceUpdateManyRequest, opts ...grpc.CallOption) (*UserServiceUpdateManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceUpdateManyResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteOne(ctx context.Context, in *UserServiceDeleteOneRequest, opts ...grpc.CallOption) (*UserServiceDeleteOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceDeleteOneResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteMany(ctx context.Context, in *UserServiceDeleteManyRequest, opts ...grpc.CallOption) (*UserServiceDeleteManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceDeleteManyResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Echo(ctx context.Context, in *UserServiceEchoRequest, opts ...grpc.CallOption) (*UserServiceEchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserServiceEchoResponse)
	err := c.cc.Invoke(ctx, UserService_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateOne(context.Context, *UserServiceCreateOneRequest) (*UserServiceCreateOneResponse, error)
	CreateMany(context.Context, *UserServiceCreateManyRequest) (*UserServiceCreateManyResponse, error)
	ReadOne(context.Context, *UserServiceReadOneRequest) (*UserServiceReadOneResponse, error)
	ReadMany(context.Context, *UserServiceReadManyRequest) (*UserServiceReadManyResponse, error)
	UpdateOne(context.Context, *UserServiceUpdateOneRequest) (*UserServiceUpdateOneResponse, error)
	UpdateMany(context.Context, *UserServiceUpdateManyRequest) (*UserServiceUpdateManyResponse, error)
	DeleteOne(context.Context, *UserServiceDeleteOneRequest) (*UserServiceDeleteOneResponse, error)
	DeleteMany(context.Context, *UserServiceDeleteManyRequest) (*UserServiceDeleteManyResponse, error)
	Echo(context.Context, *UserServiceEchoRequest) (*UserServiceEchoResponse, error)
}

// UnimplementedUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateOne(context.Context, *UserServiceCreateOneRequest) (*UserServiceCreateOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOne not implemented")
}
func (UnimplementedUserServiceServer) CreateMany(context.Context, *UserServiceCreateManyRequest) (*UserServiceCreateManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMany not implemented")
}
func (UnimplementedUserServiceServer) ReadOne(context.Context, *UserServiceReadOneRequest) (*UserServiceReadOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOne not implemented")
}
func (UnimplementedUserServiceServer) ReadMany(context.Context, *UserServiceReadManyRequest) (*UserServiceReadManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMany not implemented")
}
func (UnimplementedUserServiceServer) UpdateOne(context.Context, *UserServiceUpdateOneRequest) (*UserServiceUpdateOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOne not implemented")
}
func (UnimplementedUserServiceServer) UpdateMany(context.Context, *UserServiceUpdateManyRequest) (*UserServiceUpdateManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMany not implemented")
}
func (UnimplementedUserServiceServer) DeleteOne(context.Context, *UserServiceDeleteOneRequest) (*UserServiceDeleteOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOne not implemented")
}
func (UnimplementedUserServiceServer) DeleteMany(context.Context, *UserServiceDeleteManyRequest) (*UserServiceDeleteManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMany not implemented")
}
func (UnimplementedUserServiceServer) Echo(context.Context, *UserServiceEchoRequest) (*UserServiceEchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceCreateOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateOne(ctx, req.(*UserServiceCreateOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceCreateManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateMany(ctx, req.(*UserServiceCreateManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceReadOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ReadOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReadOne(ctx, req.(*UserServiceReadOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReadMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceReadManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReadMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ReadMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReadMany(ctx, req.(*UserServiceReadManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceUpdateOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateOne(ctx, req.(*UserServiceUpdateOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceUpdateManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateMany(ctx, req.(*UserServiceUpdateManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceDeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteOne(ctx, req.(*UserServiceDeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceDeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteMany(ctx, req.(*UserServiceDeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServiceEchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Echo(ctx, req.(*UserServiceEchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listah.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOne",
			Handler:    _UserService_CreateOne_Handler,
		},
		{
			MethodName: "CreateMany",
			Handler:    _UserService_CreateMany_Handler,
		},
		{
			MethodName: "ReadOne",
			Handler:    _UserService_ReadOne_Handler,
		},
		{
			MethodName: "ReadMany",
			Handler:    _UserService_ReadMany_Handler,
		},
		{
			MethodName: "UpdateOne",
			Handler:    _UserService_UpdateOne_Handler,
		},
		{
			MethodName: "UpdateMany",
			Handler:    _UserService_UpdateMany_Handler,
		},
		{
			MethodName: "DeleteOne",
			Handler:    _UserService_DeleteOne_Handler,
		},
		{
			MethodName: "DeleteMany",
			Handler:    _UserService_DeleteMany_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _UserService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listah/v1/user.proto",
}
