// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: listah/v1/sub_category.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SubCategoryService_Create_FullMethodName = "/listah.v1.SubCategoryService/Create"
	SubCategoryService_Read_FullMethodName   = "/listah.v1.SubCategoryService/Read"
	SubCategoryService_Update_FullMethodName = "/listah.v1.SubCategoryService/Update"
	SubCategoryService_Delete_FullMethodName = "/listah.v1.SubCategoryService/Delete"
)

// SubCategoryServiceClient is the client API for SubCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubCategoryServiceClient interface {
	Create(ctx context.Context, in *SubCategoryServiceCreateRequest, opts ...grpc.CallOption) (*SubCategoryServiceCreateResponse, error)
	Read(ctx context.Context, in *SubCategoryServiceReadRequest, opts ...grpc.CallOption) (*SubCategoryServiceReadResponse, error)
	Update(ctx context.Context, in *SubCategoryServiceUpdateRequest, opts ...grpc.CallOption) (*SubCategoryServiceUpdateResponse, error)
	Delete(ctx context.Context, in *SubCategoryServiceDeleteRequest, opts ...grpc.CallOption) (*SubCategoryServiceDeleteResponse, error)
}

type subCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubCategoryServiceClient(cc grpc.ClientConnInterface) SubCategoryServiceClient {
	return &subCategoryServiceClient{cc}
}

func (c *subCategoryServiceClient) Create(ctx context.Context, in *SubCategoryServiceCreateRequest, opts ...grpc.CallOption) (*SubCategoryServiceCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubCategoryServiceCreateResponse)
	err := c.cc.Invoke(ctx, SubCategoryService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subCategoryServiceClient) Read(ctx context.Context, in *SubCategoryServiceReadRequest, opts ...grpc.CallOption) (*SubCategoryServiceReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubCategoryServiceReadResponse)
	err := c.cc.Invoke(ctx, SubCategoryService_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subCategoryServiceClient) Update(ctx context.Context, in *SubCategoryServiceUpdateRequest, opts ...grpc.CallOption) (*SubCategoryServiceUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubCategoryServiceUpdateResponse)
	err := c.cc.Invoke(ctx, SubCategoryService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subCategoryServiceClient) Delete(ctx context.Context, in *SubCategoryServiceDeleteRequest, opts ...grpc.CallOption) (*SubCategoryServiceDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubCategoryServiceDeleteResponse)
	err := c.cc.Invoke(ctx, SubCategoryService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubCategoryServiceServer is the server API for SubCategoryService service.
// All implementations should embed UnimplementedSubCategoryServiceServer
// for forward compatibility
type SubCategoryServiceServer interface {
	Create(context.Context, *SubCategoryServiceCreateRequest) (*SubCategoryServiceCreateResponse, error)
	Read(context.Context, *SubCategoryServiceReadRequest) (*SubCategoryServiceReadResponse, error)
	Update(context.Context, *SubCategoryServiceUpdateRequest) (*SubCategoryServiceUpdateResponse, error)
	Delete(context.Context, *SubCategoryServiceDeleteRequest) (*SubCategoryServiceDeleteResponse, error)
}

// UnimplementedSubCategoryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSubCategoryServiceServer struct {
}

func (UnimplementedSubCategoryServiceServer) Create(context.Context, *SubCategoryServiceCreateRequest) (*SubCategoryServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSubCategoryServiceServer) Read(context.Context, *SubCategoryServiceReadRequest) (*SubCategoryServiceReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedSubCategoryServiceServer) Update(context.Context, *SubCategoryServiceUpdateRequest) (*SubCategoryServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSubCategoryServiceServer) Delete(context.Context, *SubCategoryServiceDeleteRequest) (*SubCategoryServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeSubCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubCategoryServiceServer will
// result in compilation errors.
type UnsafeSubCategoryServiceServer interface {
	mustEmbedUnimplementedSubCategoryServiceServer()
}

func RegisterSubCategoryServiceServer(s grpc.ServiceRegistrar, srv SubCategoryServiceServer) {
	s.RegisterService(&SubCategoryService_ServiceDesc, srv)
}

func _SubCategoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubCategoryServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubCategoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubCategoryService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubCategoryServiceServer).Create(ctx, req.(*SubCategoryServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubCategoryService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubCategoryServiceReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubCategoryServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubCategoryService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubCategoryServiceServer).Read(ctx, req.(*SubCategoryServiceReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubCategoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubCategoryServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubCategoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubCategoryService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubCategoryServiceServer).Update(ctx, req.(*SubCategoryServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubCategoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubCategoryServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubCategoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubCategoryService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubCategoryServiceServer).Delete(ctx, req.(*SubCategoryServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubCategoryService_ServiceDesc is the grpc.ServiceDesc for SubCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listah.v1.SubCategoryService",
	HandlerType: (*SubCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SubCategoryService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _SubCategoryService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SubCategoryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SubCategoryService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listah/v1/sub_category.proto",
}
