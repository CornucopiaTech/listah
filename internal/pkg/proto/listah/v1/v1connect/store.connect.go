// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: listah/v1/store.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "cornucopia/listah/internal/pkg/proto/listah/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoreServiceName is the fully-qualified name of the StoreService service.
	StoreServiceName = "listah.v1.StoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoreServiceCreateProcedure is the fully-qualified name of the StoreService's Create RPC.
	StoreServiceCreateProcedure = "/listah.v1.StoreService/Create"
	// StoreServiceCreateManyProcedure is the fully-qualified name of the StoreService's CreateMany RPC.
	StoreServiceCreateManyProcedure = "/listah.v1.StoreService/CreateMany"
	// StoreServiceReadProcedure is the fully-qualified name of the StoreService's Read RPC.
	StoreServiceReadProcedure = "/listah.v1.StoreService/Read"
	// StoreServiceUpdateProcedure is the fully-qualified name of the StoreService's Update RPC.
	StoreServiceUpdateProcedure = "/listah.v1.StoreService/Update"
	// StoreServiceDeleteProcedure is the fully-qualified name of the StoreService's Delete RPC.
	StoreServiceDeleteProcedure = "/listah.v1.StoreService/Delete"
	// StoreServiceListItemsProcedure is the fully-qualified name of the StoreService's ListItems RPC.
	StoreServiceListItemsProcedure = "/listah.v1.StoreService/ListItems"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storeServiceServiceDescriptor          = v1.File_listah_v1_store_proto.Services().ByName("StoreService")
	storeServiceCreateMethodDescriptor     = storeServiceServiceDescriptor.Methods().ByName("Create")
	storeServiceCreateManyMethodDescriptor = storeServiceServiceDescriptor.Methods().ByName("CreateMany")
	storeServiceReadMethodDescriptor       = storeServiceServiceDescriptor.Methods().ByName("Read")
	storeServiceUpdateMethodDescriptor     = storeServiceServiceDescriptor.Methods().ByName("Update")
	storeServiceDeleteMethodDescriptor     = storeServiceServiceDescriptor.Methods().ByName("Delete")
	storeServiceListItemsMethodDescriptor  = storeServiceServiceDescriptor.Methods().ByName("ListItems")
)

// StoreServiceClient is a client for the listah.v1.StoreService service.
type StoreServiceClient interface {
	Create(context.Context, *connect.Request[v1.StoreServiceCreateOneRequest]) (*connect.Response[v1.StoreServiceCreateOneResponse], error)
	CreateMany(context.Context, *connect.Request[v1.StoreServiceCreateManyRequest]) (*connect.Response[v1.StoreServiceCreateManyResponse], error)
	Read(context.Context, *connect.Request[v1.StoreServiceReadOneRequest]) (*connect.Response[v1.StoreServiceReadOneResponse], error)
	Update(context.Context, *connect.Request[v1.StoreServiceUpdateOneRequest]) (*connect.Response[v1.StoreServiceUpdateOneResponse], error)
	Delete(context.Context, *connect.Request[v1.StoreServiceDeleteOneRequest]) (*connect.Response[v1.StoreServiceDeleteOneResponse], error)
	ListItems(context.Context, *connect.Request[v1.StoreServiceListItemsRequest]) (*connect.Response[v1.StoreServiceListItemsResponse], error)
}

// NewStoreServiceClient constructs a client for the listah.v1.StoreService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storeServiceClient{
		create: connect.NewClient[v1.StoreServiceCreateOneRequest, v1.StoreServiceCreateOneResponse](
			httpClient,
			baseURL+StoreServiceCreateProcedure,
			connect.WithSchema(storeServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createMany: connect.NewClient[v1.StoreServiceCreateManyRequest, v1.StoreServiceCreateManyResponse](
			httpClient,
			baseURL+StoreServiceCreateManyProcedure,
			connect.WithSchema(storeServiceCreateManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		read: connect.NewClient[v1.StoreServiceReadOneRequest, v1.StoreServiceReadOneResponse](
			httpClient,
			baseURL+StoreServiceReadProcedure,
			connect.WithSchema(storeServiceReadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.StoreServiceUpdateOneRequest, v1.StoreServiceUpdateOneResponse](
			httpClient,
			baseURL+StoreServiceUpdateProcedure,
			connect.WithSchema(storeServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.StoreServiceDeleteOneRequest, v1.StoreServiceDeleteOneResponse](
			httpClient,
			baseURL+StoreServiceDeleteProcedure,
			connect.WithSchema(storeServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listItems: connect.NewClient[v1.StoreServiceListItemsRequest, v1.StoreServiceListItemsResponse](
			httpClient,
			baseURL+StoreServiceListItemsProcedure,
			connect.WithSchema(storeServiceListItemsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storeServiceClient implements StoreServiceClient.
type storeServiceClient struct {
	create     *connect.Client[v1.StoreServiceCreateOneRequest, v1.StoreServiceCreateOneResponse]
	createMany *connect.Client[v1.StoreServiceCreateManyRequest, v1.StoreServiceCreateManyResponse]
	read       *connect.Client[v1.StoreServiceReadOneRequest, v1.StoreServiceReadOneResponse]
	update     *connect.Client[v1.StoreServiceUpdateOneRequest, v1.StoreServiceUpdateOneResponse]
	delete     *connect.Client[v1.StoreServiceDeleteOneRequest, v1.StoreServiceDeleteOneResponse]
	listItems  *connect.Client[v1.StoreServiceListItemsRequest, v1.StoreServiceListItemsResponse]
}

// Create calls listah.v1.StoreService.Create.
func (c *storeServiceClient) Create(ctx context.Context, req *connect.Request[v1.StoreServiceCreateOneRequest]) (*connect.Response[v1.StoreServiceCreateOneResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// CreateMany calls listah.v1.StoreService.CreateMany.
func (c *storeServiceClient) CreateMany(ctx context.Context, req *connect.Request[v1.StoreServiceCreateManyRequest]) (*connect.Response[v1.StoreServiceCreateManyResponse], error) {
	return c.createMany.CallUnary(ctx, req)
}

// Read calls listah.v1.StoreService.Read.
func (c *storeServiceClient) Read(ctx context.Context, req *connect.Request[v1.StoreServiceReadOneRequest]) (*connect.Response[v1.StoreServiceReadOneResponse], error) {
	return c.read.CallUnary(ctx, req)
}

// Update calls listah.v1.StoreService.Update.
func (c *storeServiceClient) Update(ctx context.Context, req *connect.Request[v1.StoreServiceUpdateOneRequest]) (*connect.Response[v1.StoreServiceUpdateOneResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls listah.v1.StoreService.Delete.
func (c *storeServiceClient) Delete(ctx context.Context, req *connect.Request[v1.StoreServiceDeleteOneRequest]) (*connect.Response[v1.StoreServiceDeleteOneResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// ListItems calls listah.v1.StoreService.ListItems.
func (c *storeServiceClient) ListItems(ctx context.Context, req *connect.Request[v1.StoreServiceListItemsRequest]) (*connect.Response[v1.StoreServiceListItemsResponse], error) {
	return c.listItems.CallUnary(ctx, req)
}

// StoreServiceHandler is an implementation of the listah.v1.StoreService service.
type StoreServiceHandler interface {
	Create(context.Context, *connect.Request[v1.StoreServiceCreateOneRequest]) (*connect.Response[v1.StoreServiceCreateOneResponse], error)
	CreateMany(context.Context, *connect.Request[v1.StoreServiceCreateManyRequest]) (*connect.Response[v1.StoreServiceCreateManyResponse], error)
	Read(context.Context, *connect.Request[v1.StoreServiceReadOneRequest]) (*connect.Response[v1.StoreServiceReadOneResponse], error)
	Update(context.Context, *connect.Request[v1.StoreServiceUpdateOneRequest]) (*connect.Response[v1.StoreServiceUpdateOneResponse], error)
	Delete(context.Context, *connect.Request[v1.StoreServiceDeleteOneRequest]) (*connect.Response[v1.StoreServiceDeleteOneResponse], error)
	ListItems(context.Context, *connect.Request[v1.StoreServiceListItemsRequest]) (*connect.Response[v1.StoreServiceListItemsResponse], error)
}

// NewStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoreServiceHandler(svc StoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storeServiceCreateHandler := connect.NewUnaryHandler(
		StoreServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(storeServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceCreateManyHandler := connect.NewUnaryHandler(
		StoreServiceCreateManyProcedure,
		svc.CreateMany,
		connect.WithSchema(storeServiceCreateManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceReadHandler := connect.NewUnaryHandler(
		StoreServiceReadProcedure,
		svc.Read,
		connect.WithSchema(storeServiceReadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceUpdateHandler := connect.NewUnaryHandler(
		StoreServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(storeServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceDeleteHandler := connect.NewUnaryHandler(
		StoreServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(storeServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceListItemsHandler := connect.NewUnaryHandler(
		StoreServiceListItemsProcedure,
		svc.ListItems,
		connect.WithSchema(storeServiceListItemsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/listah.v1.StoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoreServiceCreateProcedure:
			storeServiceCreateHandler.ServeHTTP(w, r)
		case StoreServiceCreateManyProcedure:
			storeServiceCreateManyHandler.ServeHTTP(w, r)
		case StoreServiceReadProcedure:
			storeServiceReadHandler.ServeHTTP(w, r)
		case StoreServiceUpdateProcedure:
			storeServiceUpdateHandler.ServeHTTP(w, r)
		case StoreServiceDeleteProcedure:
			storeServiceDeleteHandler.ServeHTTP(w, r)
		case StoreServiceListItemsProcedure:
			storeServiceListItemsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStoreServiceHandler struct{}

func (UnimplementedStoreServiceHandler) Create(context.Context, *connect.Request[v1.StoreServiceCreateOneRequest]) (*connect.Response[v1.StoreServiceCreateOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.Create is not implemented"))
}

func (UnimplementedStoreServiceHandler) CreateMany(context.Context, *connect.Request[v1.StoreServiceCreateManyRequest]) (*connect.Response[v1.StoreServiceCreateManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.CreateMany is not implemented"))
}

func (UnimplementedStoreServiceHandler) Read(context.Context, *connect.Request[v1.StoreServiceReadOneRequest]) (*connect.Response[v1.StoreServiceReadOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.Read is not implemented"))
}

func (UnimplementedStoreServiceHandler) Update(context.Context, *connect.Request[v1.StoreServiceUpdateOneRequest]) (*connect.Response[v1.StoreServiceUpdateOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.Update is not implemented"))
}

func (UnimplementedStoreServiceHandler) Delete(context.Context, *connect.Request[v1.StoreServiceDeleteOneRequest]) (*connect.Response[v1.StoreServiceDeleteOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.Delete is not implemented"))
}

func (UnimplementedStoreServiceHandler) ListItems(context.Context, *connect.Request[v1.StoreServiceListItemsRequest]) (*connect.Response[v1.StoreServiceListItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.ListItems is not implemented"))
}
