// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: listah/v1/store.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "cornucopia/listah/internal/pkg/proto/listah/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoreServiceName is the fully-qualified name of the StoreService service.
	StoreServiceName = "listah.v1.StoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoreServiceCreateOneProcedure is the fully-qualified name of the StoreService's CreateOne RPC.
	StoreServiceCreateOneProcedure = "/listah.v1.StoreService/CreateOne"
	// StoreServiceCreateManyProcedure is the fully-qualified name of the StoreService's CreateMany RPC.
	StoreServiceCreateManyProcedure = "/listah.v1.StoreService/CreateMany"
	// StoreServiceReadOneProcedure is the fully-qualified name of the StoreService's ReadOne RPC.
	StoreServiceReadOneProcedure = "/listah.v1.StoreService/ReadOne"
	// StoreServiceReadManyProcedure is the fully-qualified name of the StoreService's ReadMany RPC.
	StoreServiceReadManyProcedure = "/listah.v1.StoreService/ReadMany"
	// StoreServiceUpdateOneProcedure is the fully-qualified name of the StoreService's UpdateOne RPC.
	StoreServiceUpdateOneProcedure = "/listah.v1.StoreService/UpdateOne"
	// StoreServiceUpdateManyProcedure is the fully-qualified name of the StoreService's UpdateMany RPC.
	StoreServiceUpdateManyProcedure = "/listah.v1.StoreService/UpdateMany"
	// StoreServiceDeleteOneProcedure is the fully-qualified name of the StoreService's DeleteOne RPC.
	StoreServiceDeleteOneProcedure = "/listah.v1.StoreService/DeleteOne"
	// StoreServiceDeleteManyProcedure is the fully-qualified name of the StoreService's DeleteMany RPC.
	StoreServiceDeleteManyProcedure = "/listah.v1.StoreService/DeleteMany"
	// StoreServiceListProcedure is the fully-qualified name of the StoreService's List RPC.
	StoreServiceListProcedure = "/listah.v1.StoreService/List"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storeServiceServiceDescriptor          = v1.File_listah_v1_store_proto.Services().ByName("StoreService")
	storeServiceCreateOneMethodDescriptor  = storeServiceServiceDescriptor.Methods().ByName("CreateOne")
	storeServiceCreateManyMethodDescriptor = storeServiceServiceDescriptor.Methods().ByName("CreateMany")
	storeServiceReadOneMethodDescriptor    = storeServiceServiceDescriptor.Methods().ByName("ReadOne")
	storeServiceReadManyMethodDescriptor   = storeServiceServiceDescriptor.Methods().ByName("ReadMany")
	storeServiceUpdateOneMethodDescriptor  = storeServiceServiceDescriptor.Methods().ByName("UpdateOne")
	storeServiceUpdateManyMethodDescriptor = storeServiceServiceDescriptor.Methods().ByName("UpdateMany")
	storeServiceDeleteOneMethodDescriptor  = storeServiceServiceDescriptor.Methods().ByName("DeleteOne")
	storeServiceDeleteManyMethodDescriptor = storeServiceServiceDescriptor.Methods().ByName("DeleteMany")
	storeServiceListMethodDescriptor       = storeServiceServiceDescriptor.Methods().ByName("List")
)

// StoreServiceClient is a client for the listah.v1.StoreService service.
type StoreServiceClient interface {
	CreateOne(context.Context, *connect.Request[v1.StoreServiceCreateOneRequest]) (*connect.Response[v1.StoreServiceCreateOneResponse], error)
	CreateMany(context.Context, *connect.Request[v1.StoreServiceCreateManyRequest]) (*connect.Response[v1.StoreServiceCreateManyResponse], error)
	ReadOne(context.Context, *connect.Request[v1.StoreServiceReadOneRequest]) (*connect.Response[v1.StoreServiceReadOneResponse], error)
	ReadMany(context.Context, *connect.Request[v1.StoreServiceReadManyRequest]) (*connect.Response[v1.StoreServiceReadManyResponse], error)
	UpdateOne(context.Context, *connect.Request[v1.StoreServiceUpdateOneRequest]) (*connect.Response[v1.StoreServiceUpdateOneResponse], error)
	UpdateMany(context.Context, *connect.Request[v1.StoreServiceUpdateManyRequest]) (*connect.Response[v1.StoreServiceUpdateManyResponse], error)
	DeleteOne(context.Context, *connect.Request[v1.StoreServiceDeleteOneRequest]) (*connect.Response[v1.StoreServiceDeleteOneResponse], error)
	DeleteMany(context.Context, *connect.Request[v1.StoreServiceDeleteManyRequest]) (*connect.Response[v1.StoreServiceDeleteManyResponse], error)
	List(context.Context, *connect.Request[v1.StoreServiceListRequest]) (*connect.Response[v1.StoreServiceListResponse], error)
}

// NewStoreServiceClient constructs a client for the listah.v1.StoreService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storeServiceClient{
		createOne: connect.NewClient[v1.StoreServiceCreateOneRequest, v1.StoreServiceCreateOneResponse](
			httpClient,
			baseURL+StoreServiceCreateOneProcedure,
			connect.WithSchema(storeServiceCreateOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createMany: connect.NewClient[v1.StoreServiceCreateManyRequest, v1.StoreServiceCreateManyResponse](
			httpClient,
			baseURL+StoreServiceCreateManyProcedure,
			connect.WithSchema(storeServiceCreateManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readOne: connect.NewClient[v1.StoreServiceReadOneRequest, v1.StoreServiceReadOneResponse](
			httpClient,
			baseURL+StoreServiceReadOneProcedure,
			connect.WithSchema(storeServiceReadOneMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		readMany: connect.NewClient[v1.StoreServiceReadManyRequest, v1.StoreServiceReadManyResponse](
			httpClient,
			baseURL+StoreServiceReadManyProcedure,
			connect.WithSchema(storeServiceReadManyMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateOne: connect.NewClient[v1.StoreServiceUpdateOneRequest, v1.StoreServiceUpdateOneResponse](
			httpClient,
			baseURL+StoreServiceUpdateOneProcedure,
			connect.WithSchema(storeServiceUpdateOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateMany: connect.NewClient[v1.StoreServiceUpdateManyRequest, v1.StoreServiceUpdateManyResponse](
			httpClient,
			baseURL+StoreServiceUpdateManyProcedure,
			connect.WithSchema(storeServiceUpdateManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOne: connect.NewClient[v1.StoreServiceDeleteOneRequest, v1.StoreServiceDeleteOneResponse](
			httpClient,
			baseURL+StoreServiceDeleteOneProcedure,
			connect.WithSchema(storeServiceDeleteOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteMany: connect.NewClient[v1.StoreServiceDeleteManyRequest, v1.StoreServiceDeleteManyResponse](
			httpClient,
			baseURL+StoreServiceDeleteManyProcedure,
			connect.WithSchema(storeServiceDeleteManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.StoreServiceListRequest, v1.StoreServiceListResponse](
			httpClient,
			baseURL+StoreServiceListProcedure,
			connect.WithSchema(storeServiceListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// storeServiceClient implements StoreServiceClient.
type storeServiceClient struct {
	createOne  *connect.Client[v1.StoreServiceCreateOneRequest, v1.StoreServiceCreateOneResponse]
	createMany *connect.Client[v1.StoreServiceCreateManyRequest, v1.StoreServiceCreateManyResponse]
	readOne    *connect.Client[v1.StoreServiceReadOneRequest, v1.StoreServiceReadOneResponse]
	readMany   *connect.Client[v1.StoreServiceReadManyRequest, v1.StoreServiceReadManyResponse]
	updateOne  *connect.Client[v1.StoreServiceUpdateOneRequest, v1.StoreServiceUpdateOneResponse]
	updateMany *connect.Client[v1.StoreServiceUpdateManyRequest, v1.StoreServiceUpdateManyResponse]
	deleteOne  *connect.Client[v1.StoreServiceDeleteOneRequest, v1.StoreServiceDeleteOneResponse]
	deleteMany *connect.Client[v1.StoreServiceDeleteManyRequest, v1.StoreServiceDeleteManyResponse]
	list       *connect.Client[v1.StoreServiceListRequest, v1.StoreServiceListResponse]
}

// CreateOne calls listah.v1.StoreService.CreateOne.
func (c *storeServiceClient) CreateOne(ctx context.Context, req *connect.Request[v1.StoreServiceCreateOneRequest]) (*connect.Response[v1.StoreServiceCreateOneResponse], error) {
	return c.createOne.CallUnary(ctx, req)
}

// CreateMany calls listah.v1.StoreService.CreateMany.
func (c *storeServiceClient) CreateMany(ctx context.Context, req *connect.Request[v1.StoreServiceCreateManyRequest]) (*connect.Response[v1.StoreServiceCreateManyResponse], error) {
	return c.createMany.CallUnary(ctx, req)
}

// ReadOne calls listah.v1.StoreService.ReadOne.
func (c *storeServiceClient) ReadOne(ctx context.Context, req *connect.Request[v1.StoreServiceReadOneRequest]) (*connect.Response[v1.StoreServiceReadOneResponse], error) {
	return c.readOne.CallUnary(ctx, req)
}

// ReadMany calls listah.v1.StoreService.ReadMany.
func (c *storeServiceClient) ReadMany(ctx context.Context, req *connect.Request[v1.StoreServiceReadManyRequest]) (*connect.Response[v1.StoreServiceReadManyResponse], error) {
	return c.readMany.CallUnary(ctx, req)
}

// UpdateOne calls listah.v1.StoreService.UpdateOne.
func (c *storeServiceClient) UpdateOne(ctx context.Context, req *connect.Request[v1.StoreServiceUpdateOneRequest]) (*connect.Response[v1.StoreServiceUpdateOneResponse], error) {
	return c.updateOne.CallUnary(ctx, req)
}

// UpdateMany calls listah.v1.StoreService.UpdateMany.
func (c *storeServiceClient) UpdateMany(ctx context.Context, req *connect.Request[v1.StoreServiceUpdateManyRequest]) (*connect.Response[v1.StoreServiceUpdateManyResponse], error) {
	return c.updateMany.CallUnary(ctx, req)
}

// DeleteOne calls listah.v1.StoreService.DeleteOne.
func (c *storeServiceClient) DeleteOne(ctx context.Context, req *connect.Request[v1.StoreServiceDeleteOneRequest]) (*connect.Response[v1.StoreServiceDeleteOneResponse], error) {
	return c.deleteOne.CallUnary(ctx, req)
}

// DeleteMany calls listah.v1.StoreService.DeleteMany.
func (c *storeServiceClient) DeleteMany(ctx context.Context, req *connect.Request[v1.StoreServiceDeleteManyRequest]) (*connect.Response[v1.StoreServiceDeleteManyResponse], error) {
	return c.deleteMany.CallUnary(ctx, req)
}

// List calls listah.v1.StoreService.List.
func (c *storeServiceClient) List(ctx context.Context, req *connect.Request[v1.StoreServiceListRequest]) (*connect.Response[v1.StoreServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// StoreServiceHandler is an implementation of the listah.v1.StoreService service.
type StoreServiceHandler interface {
	CreateOne(context.Context, *connect.Request[v1.StoreServiceCreateOneRequest]) (*connect.Response[v1.StoreServiceCreateOneResponse], error)
	CreateMany(context.Context, *connect.Request[v1.StoreServiceCreateManyRequest]) (*connect.Response[v1.StoreServiceCreateManyResponse], error)
	ReadOne(context.Context, *connect.Request[v1.StoreServiceReadOneRequest]) (*connect.Response[v1.StoreServiceReadOneResponse], error)
	ReadMany(context.Context, *connect.Request[v1.StoreServiceReadManyRequest]) (*connect.Response[v1.StoreServiceReadManyResponse], error)
	UpdateOne(context.Context, *connect.Request[v1.StoreServiceUpdateOneRequest]) (*connect.Response[v1.StoreServiceUpdateOneResponse], error)
	UpdateMany(context.Context, *connect.Request[v1.StoreServiceUpdateManyRequest]) (*connect.Response[v1.StoreServiceUpdateManyResponse], error)
	DeleteOne(context.Context, *connect.Request[v1.StoreServiceDeleteOneRequest]) (*connect.Response[v1.StoreServiceDeleteOneResponse], error)
	DeleteMany(context.Context, *connect.Request[v1.StoreServiceDeleteManyRequest]) (*connect.Response[v1.StoreServiceDeleteManyResponse], error)
	List(context.Context, *connect.Request[v1.StoreServiceListRequest]) (*connect.Response[v1.StoreServiceListResponse], error)
}

// NewStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoreServiceHandler(svc StoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storeServiceCreateOneHandler := connect.NewUnaryHandler(
		StoreServiceCreateOneProcedure,
		svc.CreateOne,
		connect.WithSchema(storeServiceCreateOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceCreateManyHandler := connect.NewUnaryHandler(
		StoreServiceCreateManyProcedure,
		svc.CreateMany,
		connect.WithSchema(storeServiceCreateManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceReadOneHandler := connect.NewUnaryHandler(
		StoreServiceReadOneProcedure,
		svc.ReadOne,
		connect.WithSchema(storeServiceReadOneMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceReadManyHandler := connect.NewUnaryHandler(
		StoreServiceReadManyProcedure,
		svc.ReadMany,
		connect.WithSchema(storeServiceReadManyMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceUpdateOneHandler := connect.NewUnaryHandler(
		StoreServiceUpdateOneProcedure,
		svc.UpdateOne,
		connect.WithSchema(storeServiceUpdateOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceUpdateManyHandler := connect.NewUnaryHandler(
		StoreServiceUpdateManyProcedure,
		svc.UpdateMany,
		connect.WithSchema(storeServiceUpdateManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceDeleteOneHandler := connect.NewUnaryHandler(
		StoreServiceDeleteOneProcedure,
		svc.DeleteOne,
		connect.WithSchema(storeServiceDeleteOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceDeleteManyHandler := connect.NewUnaryHandler(
		StoreServiceDeleteManyProcedure,
		svc.DeleteMany,
		connect.WithSchema(storeServiceDeleteManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storeServiceListHandler := connect.NewUnaryHandler(
		StoreServiceListProcedure,
		svc.List,
		connect.WithSchema(storeServiceListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/listah.v1.StoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoreServiceCreateOneProcedure:
			storeServiceCreateOneHandler.ServeHTTP(w, r)
		case StoreServiceCreateManyProcedure:
			storeServiceCreateManyHandler.ServeHTTP(w, r)
		case StoreServiceReadOneProcedure:
			storeServiceReadOneHandler.ServeHTTP(w, r)
		case StoreServiceReadManyProcedure:
			storeServiceReadManyHandler.ServeHTTP(w, r)
		case StoreServiceUpdateOneProcedure:
			storeServiceUpdateOneHandler.ServeHTTP(w, r)
		case StoreServiceUpdateManyProcedure:
			storeServiceUpdateManyHandler.ServeHTTP(w, r)
		case StoreServiceDeleteOneProcedure:
			storeServiceDeleteOneHandler.ServeHTTP(w, r)
		case StoreServiceDeleteManyProcedure:
			storeServiceDeleteManyHandler.ServeHTTP(w, r)
		case StoreServiceListProcedure:
			storeServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStoreServiceHandler struct{}

func (UnimplementedStoreServiceHandler) CreateOne(context.Context, *connect.Request[v1.StoreServiceCreateOneRequest]) (*connect.Response[v1.StoreServiceCreateOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.CreateOne is not implemented"))
}

func (UnimplementedStoreServiceHandler) CreateMany(context.Context, *connect.Request[v1.StoreServiceCreateManyRequest]) (*connect.Response[v1.StoreServiceCreateManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.CreateMany is not implemented"))
}

func (UnimplementedStoreServiceHandler) ReadOne(context.Context, *connect.Request[v1.StoreServiceReadOneRequest]) (*connect.Response[v1.StoreServiceReadOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.ReadOne is not implemented"))
}

func (UnimplementedStoreServiceHandler) ReadMany(context.Context, *connect.Request[v1.StoreServiceReadManyRequest]) (*connect.Response[v1.StoreServiceReadManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.ReadMany is not implemented"))
}

func (UnimplementedStoreServiceHandler) UpdateOne(context.Context, *connect.Request[v1.StoreServiceUpdateOneRequest]) (*connect.Response[v1.StoreServiceUpdateOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.UpdateOne is not implemented"))
}

func (UnimplementedStoreServiceHandler) UpdateMany(context.Context, *connect.Request[v1.StoreServiceUpdateManyRequest]) (*connect.Response[v1.StoreServiceUpdateManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.UpdateMany is not implemented"))
}

func (UnimplementedStoreServiceHandler) DeleteOne(context.Context, *connect.Request[v1.StoreServiceDeleteOneRequest]) (*connect.Response[v1.StoreServiceDeleteOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.DeleteOne is not implemented"))
}

func (UnimplementedStoreServiceHandler) DeleteMany(context.Context, *connect.Request[v1.StoreServiceDeleteManyRequest]) (*connect.Response[v1.StoreServiceDeleteManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.DeleteMany is not implemented"))
}

func (UnimplementedStoreServiceHandler) List(context.Context, *connect.Request[v1.StoreServiceListRequest]) (*connect.Response[v1.StoreServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.StoreService.List is not implemented"))
}
