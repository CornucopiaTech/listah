// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: listah/v1/category.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "cornucopia/listah/internal/pkg/proto/listah/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CategoryServiceName is the fully-qualified name of the CategoryService service.
	CategoryServiceName = "listah.v1.CategoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CategoryServiceCreateProcedure is the fully-qualified name of the CategoryService's Create RPC.
	CategoryServiceCreateProcedure = "/listah.v1.CategoryService/Create"
	// CategoryServiceReadProcedure is the fully-qualified name of the CategoryService's Read RPC.
	CategoryServiceReadProcedure = "/listah.v1.CategoryService/Read"
	// CategoryServiceUpdateProcedure is the fully-qualified name of the CategoryService's Update RPC.
	CategoryServiceUpdateProcedure = "/listah.v1.CategoryService/Update"
	// CategoryServiceDeleteProcedure is the fully-qualified name of the CategoryService's Delete RPC.
	CategoryServiceDeleteProcedure = "/listah.v1.CategoryService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	categoryServiceServiceDescriptor      = v1.File_listah_v1_category_proto.Services().ByName("CategoryService")
	categoryServiceCreateMethodDescriptor = categoryServiceServiceDescriptor.Methods().ByName("Create")
	categoryServiceReadMethodDescriptor   = categoryServiceServiceDescriptor.Methods().ByName("Read")
	categoryServiceUpdateMethodDescriptor = categoryServiceServiceDescriptor.Methods().ByName("Update")
	categoryServiceDeleteMethodDescriptor = categoryServiceServiceDescriptor.Methods().ByName("Delete")
)

// CategoryServiceClient is a client for the listah.v1.CategoryService service.
type CategoryServiceClient interface {
	Create(context.Context, *connect.Request[v1.CategoryServiceCreateRequest]) (*connect.Response[v1.CategoryServiceCreateResponse], error)
	Read(context.Context, *connect.Request[v1.CategoryServiceReadRequest]) (*connect.Response[v1.CategoryServiceReadResponse], error)
	Update(context.Context, *connect.Request[v1.CategoryServiceUpdateRequest]) (*connect.Response[v1.CategoryServiceUpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.CategoryServiceDeleteRequest]) (*connect.Response[v1.CategoryServiceDeleteResponse], error)
}

// NewCategoryServiceClient constructs a client for the listah.v1.CategoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCategoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &categoryServiceClient{
		create: connect.NewClient[v1.CategoryServiceCreateRequest, v1.CategoryServiceCreateResponse](
			httpClient,
			baseURL+CategoryServiceCreateProcedure,
			connect.WithSchema(categoryServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		read: connect.NewClient[v1.CategoryServiceReadRequest, v1.CategoryServiceReadResponse](
			httpClient,
			baseURL+CategoryServiceReadProcedure,
			connect.WithSchema(categoryServiceReadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.CategoryServiceUpdateRequest, v1.CategoryServiceUpdateResponse](
			httpClient,
			baseURL+CategoryServiceUpdateProcedure,
			connect.WithSchema(categoryServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.CategoryServiceDeleteRequest, v1.CategoryServiceDeleteResponse](
			httpClient,
			baseURL+CategoryServiceDeleteProcedure,
			connect.WithSchema(categoryServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// categoryServiceClient implements CategoryServiceClient.
type categoryServiceClient struct {
	create *connect.Client[v1.CategoryServiceCreateRequest, v1.CategoryServiceCreateResponse]
	read   *connect.Client[v1.CategoryServiceReadRequest, v1.CategoryServiceReadResponse]
	update *connect.Client[v1.CategoryServiceUpdateRequest, v1.CategoryServiceUpdateResponse]
	delete *connect.Client[v1.CategoryServiceDeleteRequest, v1.CategoryServiceDeleteResponse]
}

// Create calls listah.v1.CategoryService.Create.
func (c *categoryServiceClient) Create(ctx context.Context, req *connect.Request[v1.CategoryServiceCreateRequest]) (*connect.Response[v1.CategoryServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Read calls listah.v1.CategoryService.Read.
func (c *categoryServiceClient) Read(ctx context.Context, req *connect.Request[v1.CategoryServiceReadRequest]) (*connect.Response[v1.CategoryServiceReadResponse], error) {
	return c.read.CallUnary(ctx, req)
}

// Update calls listah.v1.CategoryService.Update.
func (c *categoryServiceClient) Update(ctx context.Context, req *connect.Request[v1.CategoryServiceUpdateRequest]) (*connect.Response[v1.CategoryServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls listah.v1.CategoryService.Delete.
func (c *categoryServiceClient) Delete(ctx context.Context, req *connect.Request[v1.CategoryServiceDeleteRequest]) (*connect.Response[v1.CategoryServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// CategoryServiceHandler is an implementation of the listah.v1.CategoryService service.
type CategoryServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CategoryServiceCreateRequest]) (*connect.Response[v1.CategoryServiceCreateResponse], error)
	Read(context.Context, *connect.Request[v1.CategoryServiceReadRequest]) (*connect.Response[v1.CategoryServiceReadResponse], error)
	Update(context.Context, *connect.Request[v1.CategoryServiceUpdateRequest]) (*connect.Response[v1.CategoryServiceUpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.CategoryServiceDeleteRequest]) (*connect.Response[v1.CategoryServiceDeleteResponse], error)
}

// NewCategoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCategoryServiceHandler(svc CategoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	categoryServiceCreateHandler := connect.NewUnaryHandler(
		CategoryServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(categoryServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceReadHandler := connect.NewUnaryHandler(
		CategoryServiceReadProcedure,
		svc.Read,
		connect.WithSchema(categoryServiceReadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceUpdateHandler := connect.NewUnaryHandler(
		CategoryServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(categoryServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceDeleteHandler := connect.NewUnaryHandler(
		CategoryServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(categoryServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/listah.v1.CategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CategoryServiceCreateProcedure:
			categoryServiceCreateHandler.ServeHTTP(w, r)
		case CategoryServiceReadProcedure:
			categoryServiceReadHandler.ServeHTTP(w, r)
		case CategoryServiceUpdateProcedure:
			categoryServiceUpdateHandler.ServeHTTP(w, r)
		case CategoryServiceDeleteProcedure:
			categoryServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCategoryServiceHandler struct{}

func (UnimplementedCategoryServiceHandler) Create(context.Context, *connect.Request[v1.CategoryServiceCreateRequest]) (*connect.Response[v1.CategoryServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.Create is not implemented"))
}

func (UnimplementedCategoryServiceHandler) Read(context.Context, *connect.Request[v1.CategoryServiceReadRequest]) (*connect.Response[v1.CategoryServiceReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.Read is not implemented"))
}

func (UnimplementedCategoryServiceHandler) Update(context.Context, *connect.Request[v1.CategoryServiceUpdateRequest]) (*connect.Response[v1.CategoryServiceUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.Update is not implemented"))
}

func (UnimplementedCategoryServiceHandler) Delete(context.Context, *connect.Request[v1.CategoryServiceDeleteRequest]) (*connect.Response[v1.CategoryServiceDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.Delete is not implemented"))
}
