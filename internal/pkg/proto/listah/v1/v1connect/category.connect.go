// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: listah/v1/category.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "cornucopia/listah/internal/pkg/proto/listah/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CategoryServiceName is the fully-qualified name of the CategoryService service.
	CategoryServiceName = "listah.v1.CategoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CategoryServiceCreateOneProcedure is the fully-qualified name of the CategoryService's CreateOne
	// RPC.
	CategoryServiceCreateOneProcedure = "/listah.v1.CategoryService/CreateOne"
	// CategoryServiceCreateManyProcedure is the fully-qualified name of the CategoryService's
	// CreateMany RPC.
	CategoryServiceCreateManyProcedure = "/listah.v1.CategoryService/CreateMany"
	// CategoryServiceReadOneProcedure is the fully-qualified name of the CategoryService's ReadOne RPC.
	CategoryServiceReadOneProcedure = "/listah.v1.CategoryService/ReadOne"
	// CategoryServiceReadManyProcedure is the fully-qualified name of the CategoryService's ReadMany
	// RPC.
	CategoryServiceReadManyProcedure = "/listah.v1.CategoryService/ReadMany"
	// CategoryServiceUpdateOneProcedure is the fully-qualified name of the CategoryService's UpdateOne
	// RPC.
	CategoryServiceUpdateOneProcedure = "/listah.v1.CategoryService/UpdateOne"
	// CategoryServiceUpdateManyProcedure is the fully-qualified name of the CategoryService's
	// UpdateMany RPC.
	CategoryServiceUpdateManyProcedure = "/listah.v1.CategoryService/UpdateMany"
	// CategoryServiceDeleteOneProcedure is the fully-qualified name of the CategoryService's DeleteOne
	// RPC.
	CategoryServiceDeleteOneProcedure = "/listah.v1.CategoryService/DeleteOne"
	// CategoryServiceDeleteManyProcedure is the fully-qualified name of the CategoryService's
	// DeleteMany RPC.
	CategoryServiceDeleteManyProcedure = "/listah.v1.CategoryService/DeleteMany"
	// CategoryServiceListItemsProcedure is the fully-qualified name of the CategoryService's ListItems
	// RPC.
	CategoryServiceListItemsProcedure = "/listah.v1.CategoryService/ListItems"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	categoryServiceServiceDescriptor          = v1.File_listah_v1_category_proto.Services().ByName("CategoryService")
	categoryServiceCreateOneMethodDescriptor  = categoryServiceServiceDescriptor.Methods().ByName("CreateOne")
	categoryServiceCreateManyMethodDescriptor = categoryServiceServiceDescriptor.Methods().ByName("CreateMany")
	categoryServiceReadOneMethodDescriptor    = categoryServiceServiceDescriptor.Methods().ByName("ReadOne")
	categoryServiceReadManyMethodDescriptor   = categoryServiceServiceDescriptor.Methods().ByName("ReadMany")
	categoryServiceUpdateOneMethodDescriptor  = categoryServiceServiceDescriptor.Methods().ByName("UpdateOne")
	categoryServiceUpdateManyMethodDescriptor = categoryServiceServiceDescriptor.Methods().ByName("UpdateMany")
	categoryServiceDeleteOneMethodDescriptor  = categoryServiceServiceDescriptor.Methods().ByName("DeleteOne")
	categoryServiceDeleteManyMethodDescriptor = categoryServiceServiceDescriptor.Methods().ByName("DeleteMany")
	categoryServiceListItemsMethodDescriptor  = categoryServiceServiceDescriptor.Methods().ByName("ListItems")
)

// CategoryServiceClient is a client for the listah.v1.CategoryService service.
type CategoryServiceClient interface {
	CreateOne(context.Context, *connect.Request[v1.CategoryServiceCreateOneRequest]) (*connect.Response[v1.CategoryServiceCreateOneResponse], error)
	CreateMany(context.Context, *connect.Request[v1.CategoryServiceCreateManyRequest]) (*connect.Response[v1.CategoryServiceCreateManyResponse], error)
	ReadOne(context.Context, *connect.Request[v1.CategoryServiceReadOneRequest]) (*connect.Response[v1.CategoryServiceReadOneResponse], error)
	ReadMany(context.Context, *connect.Request[v1.CategoryServiceReadManyRequest]) (*connect.Response[v1.CategoryServiceReadManyResponse], error)
	UpdateOne(context.Context, *connect.Request[v1.CategoryServiceUpdateOneRequest]) (*connect.Response[v1.CategoryServiceUpdateOneResponse], error)
	UpdateMany(context.Context, *connect.Request[v1.CategoryServiceUpdateManyRequest]) (*connect.Response[v1.CategoryServiceUpdateManyResponse], error)
	DeleteOne(context.Context, *connect.Request[v1.CategoryServiceDeleteOneRequest]) (*connect.Response[v1.CategoryServiceDeleteOneResponse], error)
	DeleteMany(context.Context, *connect.Request[v1.CategoryServiceDeleteManyRequest]) (*connect.Response[v1.CategoryServiceDeleteManyResponse], error)
	ListItems(context.Context, *connect.Request[v1.CategoryServiceListItemsRequest]) (*connect.Response[v1.CategoryServiceListItemsResponse], error)
}

// NewCategoryServiceClient constructs a client for the listah.v1.CategoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCategoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &categoryServiceClient{
		createOne: connect.NewClient[v1.CategoryServiceCreateOneRequest, v1.CategoryServiceCreateOneResponse](
			httpClient,
			baseURL+CategoryServiceCreateOneProcedure,
			connect.WithSchema(categoryServiceCreateOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createMany: connect.NewClient[v1.CategoryServiceCreateManyRequest, v1.CategoryServiceCreateManyResponse](
			httpClient,
			baseURL+CategoryServiceCreateManyProcedure,
			connect.WithSchema(categoryServiceCreateManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readOne: connect.NewClient[v1.CategoryServiceReadOneRequest, v1.CategoryServiceReadOneResponse](
			httpClient,
			baseURL+CategoryServiceReadOneProcedure,
			connect.WithSchema(categoryServiceReadOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readMany: connect.NewClient[v1.CategoryServiceReadManyRequest, v1.CategoryServiceReadManyResponse](
			httpClient,
			baseURL+CategoryServiceReadManyProcedure,
			connect.WithSchema(categoryServiceReadManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOne: connect.NewClient[v1.CategoryServiceUpdateOneRequest, v1.CategoryServiceUpdateOneResponse](
			httpClient,
			baseURL+CategoryServiceUpdateOneProcedure,
			connect.WithSchema(categoryServiceUpdateOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateMany: connect.NewClient[v1.CategoryServiceUpdateManyRequest, v1.CategoryServiceUpdateManyResponse](
			httpClient,
			baseURL+CategoryServiceUpdateManyProcedure,
			connect.WithSchema(categoryServiceUpdateManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOne: connect.NewClient[v1.CategoryServiceDeleteOneRequest, v1.CategoryServiceDeleteOneResponse](
			httpClient,
			baseURL+CategoryServiceDeleteOneProcedure,
			connect.WithSchema(categoryServiceDeleteOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteMany: connect.NewClient[v1.CategoryServiceDeleteManyRequest, v1.CategoryServiceDeleteManyResponse](
			httpClient,
			baseURL+CategoryServiceDeleteManyProcedure,
			connect.WithSchema(categoryServiceDeleteManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listItems: connect.NewClient[v1.CategoryServiceListItemsRequest, v1.CategoryServiceListItemsResponse](
			httpClient,
			baseURL+CategoryServiceListItemsProcedure,
			connect.WithSchema(categoryServiceListItemsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// categoryServiceClient implements CategoryServiceClient.
type categoryServiceClient struct {
	createOne  *connect.Client[v1.CategoryServiceCreateOneRequest, v1.CategoryServiceCreateOneResponse]
	createMany *connect.Client[v1.CategoryServiceCreateManyRequest, v1.CategoryServiceCreateManyResponse]
	readOne    *connect.Client[v1.CategoryServiceReadOneRequest, v1.CategoryServiceReadOneResponse]
	readMany   *connect.Client[v1.CategoryServiceReadManyRequest, v1.CategoryServiceReadManyResponse]
	updateOne  *connect.Client[v1.CategoryServiceUpdateOneRequest, v1.CategoryServiceUpdateOneResponse]
	updateMany *connect.Client[v1.CategoryServiceUpdateManyRequest, v1.CategoryServiceUpdateManyResponse]
	deleteOne  *connect.Client[v1.CategoryServiceDeleteOneRequest, v1.CategoryServiceDeleteOneResponse]
	deleteMany *connect.Client[v1.CategoryServiceDeleteManyRequest, v1.CategoryServiceDeleteManyResponse]
	listItems  *connect.Client[v1.CategoryServiceListItemsRequest, v1.CategoryServiceListItemsResponse]
}

// CreateOne calls listah.v1.CategoryService.CreateOne.
func (c *categoryServiceClient) CreateOne(ctx context.Context, req *connect.Request[v1.CategoryServiceCreateOneRequest]) (*connect.Response[v1.CategoryServiceCreateOneResponse], error) {
	return c.createOne.CallUnary(ctx, req)
}

// CreateMany calls listah.v1.CategoryService.CreateMany.
func (c *categoryServiceClient) CreateMany(ctx context.Context, req *connect.Request[v1.CategoryServiceCreateManyRequest]) (*connect.Response[v1.CategoryServiceCreateManyResponse], error) {
	return c.createMany.CallUnary(ctx, req)
}

// ReadOne calls listah.v1.CategoryService.ReadOne.
func (c *categoryServiceClient) ReadOne(ctx context.Context, req *connect.Request[v1.CategoryServiceReadOneRequest]) (*connect.Response[v1.CategoryServiceReadOneResponse], error) {
	return c.readOne.CallUnary(ctx, req)
}

// ReadMany calls listah.v1.CategoryService.ReadMany.
func (c *categoryServiceClient) ReadMany(ctx context.Context, req *connect.Request[v1.CategoryServiceReadManyRequest]) (*connect.Response[v1.CategoryServiceReadManyResponse], error) {
	return c.readMany.CallUnary(ctx, req)
}

// UpdateOne calls listah.v1.CategoryService.UpdateOne.
func (c *categoryServiceClient) UpdateOne(ctx context.Context, req *connect.Request[v1.CategoryServiceUpdateOneRequest]) (*connect.Response[v1.CategoryServiceUpdateOneResponse], error) {
	return c.updateOne.CallUnary(ctx, req)
}

// UpdateMany calls listah.v1.CategoryService.UpdateMany.
func (c *categoryServiceClient) UpdateMany(ctx context.Context, req *connect.Request[v1.CategoryServiceUpdateManyRequest]) (*connect.Response[v1.CategoryServiceUpdateManyResponse], error) {
	return c.updateMany.CallUnary(ctx, req)
}

// DeleteOne calls listah.v1.CategoryService.DeleteOne.
func (c *categoryServiceClient) DeleteOne(ctx context.Context, req *connect.Request[v1.CategoryServiceDeleteOneRequest]) (*connect.Response[v1.CategoryServiceDeleteOneResponse], error) {
	return c.deleteOne.CallUnary(ctx, req)
}

// DeleteMany calls listah.v1.CategoryService.DeleteMany.
func (c *categoryServiceClient) DeleteMany(ctx context.Context, req *connect.Request[v1.CategoryServiceDeleteManyRequest]) (*connect.Response[v1.CategoryServiceDeleteManyResponse], error) {
	return c.deleteMany.CallUnary(ctx, req)
}

// ListItems calls listah.v1.CategoryService.ListItems.
func (c *categoryServiceClient) ListItems(ctx context.Context, req *connect.Request[v1.CategoryServiceListItemsRequest]) (*connect.Response[v1.CategoryServiceListItemsResponse], error) {
	return c.listItems.CallUnary(ctx, req)
}

// CategoryServiceHandler is an implementation of the listah.v1.CategoryService service.
type CategoryServiceHandler interface {
	CreateOne(context.Context, *connect.Request[v1.CategoryServiceCreateOneRequest]) (*connect.Response[v1.CategoryServiceCreateOneResponse], error)
	CreateMany(context.Context, *connect.Request[v1.CategoryServiceCreateManyRequest]) (*connect.Response[v1.CategoryServiceCreateManyResponse], error)
	ReadOne(context.Context, *connect.Request[v1.CategoryServiceReadOneRequest]) (*connect.Response[v1.CategoryServiceReadOneResponse], error)
	ReadMany(context.Context, *connect.Request[v1.CategoryServiceReadManyRequest]) (*connect.Response[v1.CategoryServiceReadManyResponse], error)
	UpdateOne(context.Context, *connect.Request[v1.CategoryServiceUpdateOneRequest]) (*connect.Response[v1.CategoryServiceUpdateOneResponse], error)
	UpdateMany(context.Context, *connect.Request[v1.CategoryServiceUpdateManyRequest]) (*connect.Response[v1.CategoryServiceUpdateManyResponse], error)
	DeleteOne(context.Context, *connect.Request[v1.CategoryServiceDeleteOneRequest]) (*connect.Response[v1.CategoryServiceDeleteOneResponse], error)
	DeleteMany(context.Context, *connect.Request[v1.CategoryServiceDeleteManyRequest]) (*connect.Response[v1.CategoryServiceDeleteManyResponse], error)
	ListItems(context.Context, *connect.Request[v1.CategoryServiceListItemsRequest]) (*connect.Response[v1.CategoryServiceListItemsResponse], error)
}

// NewCategoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCategoryServiceHandler(svc CategoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	categoryServiceCreateOneHandler := connect.NewUnaryHandler(
		CategoryServiceCreateOneProcedure,
		svc.CreateOne,
		connect.WithSchema(categoryServiceCreateOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceCreateManyHandler := connect.NewUnaryHandler(
		CategoryServiceCreateManyProcedure,
		svc.CreateMany,
		connect.WithSchema(categoryServiceCreateManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceReadOneHandler := connect.NewUnaryHandler(
		CategoryServiceReadOneProcedure,
		svc.ReadOne,
		connect.WithSchema(categoryServiceReadOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceReadManyHandler := connect.NewUnaryHandler(
		CategoryServiceReadManyProcedure,
		svc.ReadMany,
		connect.WithSchema(categoryServiceReadManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceUpdateOneHandler := connect.NewUnaryHandler(
		CategoryServiceUpdateOneProcedure,
		svc.UpdateOne,
		connect.WithSchema(categoryServiceUpdateOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceUpdateManyHandler := connect.NewUnaryHandler(
		CategoryServiceUpdateManyProcedure,
		svc.UpdateMany,
		connect.WithSchema(categoryServiceUpdateManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceDeleteOneHandler := connect.NewUnaryHandler(
		CategoryServiceDeleteOneProcedure,
		svc.DeleteOne,
		connect.WithSchema(categoryServiceDeleteOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceDeleteManyHandler := connect.NewUnaryHandler(
		CategoryServiceDeleteManyProcedure,
		svc.DeleteMany,
		connect.WithSchema(categoryServiceDeleteManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceListItemsHandler := connect.NewUnaryHandler(
		CategoryServiceListItemsProcedure,
		svc.ListItems,
		connect.WithSchema(categoryServiceListItemsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/listah.v1.CategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CategoryServiceCreateOneProcedure:
			categoryServiceCreateOneHandler.ServeHTTP(w, r)
		case CategoryServiceCreateManyProcedure:
			categoryServiceCreateManyHandler.ServeHTTP(w, r)
		case CategoryServiceReadOneProcedure:
			categoryServiceReadOneHandler.ServeHTTP(w, r)
		case CategoryServiceReadManyProcedure:
			categoryServiceReadManyHandler.ServeHTTP(w, r)
		case CategoryServiceUpdateOneProcedure:
			categoryServiceUpdateOneHandler.ServeHTTP(w, r)
		case CategoryServiceUpdateManyProcedure:
			categoryServiceUpdateManyHandler.ServeHTTP(w, r)
		case CategoryServiceDeleteOneProcedure:
			categoryServiceDeleteOneHandler.ServeHTTP(w, r)
		case CategoryServiceDeleteManyProcedure:
			categoryServiceDeleteManyHandler.ServeHTTP(w, r)
		case CategoryServiceListItemsProcedure:
			categoryServiceListItemsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCategoryServiceHandler struct{}

func (UnimplementedCategoryServiceHandler) CreateOne(context.Context, *connect.Request[v1.CategoryServiceCreateOneRequest]) (*connect.Response[v1.CategoryServiceCreateOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.CreateOne is not implemented"))
}

func (UnimplementedCategoryServiceHandler) CreateMany(context.Context, *connect.Request[v1.CategoryServiceCreateManyRequest]) (*connect.Response[v1.CategoryServiceCreateManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.CreateMany is not implemented"))
}

func (UnimplementedCategoryServiceHandler) ReadOne(context.Context, *connect.Request[v1.CategoryServiceReadOneRequest]) (*connect.Response[v1.CategoryServiceReadOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.ReadOne is not implemented"))
}

func (UnimplementedCategoryServiceHandler) ReadMany(context.Context, *connect.Request[v1.CategoryServiceReadManyRequest]) (*connect.Response[v1.CategoryServiceReadManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.ReadMany is not implemented"))
}

func (UnimplementedCategoryServiceHandler) UpdateOne(context.Context, *connect.Request[v1.CategoryServiceUpdateOneRequest]) (*connect.Response[v1.CategoryServiceUpdateOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.UpdateOne is not implemented"))
}

func (UnimplementedCategoryServiceHandler) UpdateMany(context.Context, *connect.Request[v1.CategoryServiceUpdateManyRequest]) (*connect.Response[v1.CategoryServiceUpdateManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.UpdateMany is not implemented"))
}

func (UnimplementedCategoryServiceHandler) DeleteOne(context.Context, *connect.Request[v1.CategoryServiceDeleteOneRequest]) (*connect.Response[v1.CategoryServiceDeleteOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.DeleteOne is not implemented"))
}

func (UnimplementedCategoryServiceHandler) DeleteMany(context.Context, *connect.Request[v1.CategoryServiceDeleteManyRequest]) (*connect.Response[v1.CategoryServiceDeleteManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.DeleteMany is not implemented"))
}

func (UnimplementedCategoryServiceHandler) ListItems(context.Context, *connect.Request[v1.CategoryServiceListItemsRequest]) (*connect.Response[v1.CategoryServiceListItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.CategoryService.ListItems is not implemented"))
}
