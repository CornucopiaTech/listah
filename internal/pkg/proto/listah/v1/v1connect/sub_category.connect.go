// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: listah/v1/sub_category.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "cornucopia/listah/internal/pkg/proto/listah/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SubCategoryServiceName is the fully-qualified name of the SubCategoryService service.
	SubCategoryServiceName = "listah.v1.SubCategoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubCategoryServiceCreateProcedure is the fully-qualified name of the SubCategoryService's Create
	// RPC.
	SubCategoryServiceCreateProcedure = "/listah.v1.SubCategoryService/Create"
	// SubCategoryServiceReadProcedure is the fully-qualified name of the SubCategoryService's Read RPC.
	SubCategoryServiceReadProcedure = "/listah.v1.SubCategoryService/Read"
	// SubCategoryServiceUpdateProcedure is the fully-qualified name of the SubCategoryService's Update
	// RPC.
	SubCategoryServiceUpdateProcedure = "/listah.v1.SubCategoryService/Update"
	// SubCategoryServiceDeleteProcedure is the fully-qualified name of the SubCategoryService's Delete
	// RPC.
	SubCategoryServiceDeleteProcedure = "/listah.v1.SubCategoryService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	subCategoryServiceServiceDescriptor      = v1.File_listah_v1_sub_category_proto.Services().ByName("SubCategoryService")
	subCategoryServiceCreateMethodDescriptor = subCategoryServiceServiceDescriptor.Methods().ByName("Create")
	subCategoryServiceReadMethodDescriptor   = subCategoryServiceServiceDescriptor.Methods().ByName("Read")
	subCategoryServiceUpdateMethodDescriptor = subCategoryServiceServiceDescriptor.Methods().ByName("Update")
	subCategoryServiceDeleteMethodDescriptor = subCategoryServiceServiceDescriptor.Methods().ByName("Delete")
)

// SubCategoryServiceClient is a client for the listah.v1.SubCategoryService service.
type SubCategoryServiceClient interface {
	Create(context.Context, *connect.Request[v1.SubCategoryServiceCreateRequest]) (*connect.Response[v1.SubCategoryServiceCreateResponse], error)
	Read(context.Context, *connect.Request[v1.SubCategoryServiceReadRequest]) (*connect.Response[v1.SubCategoryServiceReadResponse], error)
	Update(context.Context, *connect.Request[v1.SubCategoryServiceUpdateRequest]) (*connect.Response[v1.SubCategoryServiceUpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.SubCategoryServiceDeleteRequest]) (*connect.Response[v1.SubCategoryServiceDeleteResponse], error)
}

// NewSubCategoryServiceClient constructs a client for the listah.v1.SubCategoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubCategoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubCategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &subCategoryServiceClient{
		create: connect.NewClient[v1.SubCategoryServiceCreateRequest, v1.SubCategoryServiceCreateResponse](
			httpClient,
			baseURL+SubCategoryServiceCreateProcedure,
			connect.WithSchema(subCategoryServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		read: connect.NewClient[v1.SubCategoryServiceReadRequest, v1.SubCategoryServiceReadResponse](
			httpClient,
			baseURL+SubCategoryServiceReadProcedure,
			connect.WithSchema(subCategoryServiceReadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.SubCategoryServiceUpdateRequest, v1.SubCategoryServiceUpdateResponse](
			httpClient,
			baseURL+SubCategoryServiceUpdateProcedure,
			connect.WithSchema(subCategoryServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.SubCategoryServiceDeleteRequest, v1.SubCategoryServiceDeleteResponse](
			httpClient,
			baseURL+SubCategoryServiceDeleteProcedure,
			connect.WithSchema(subCategoryServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// subCategoryServiceClient implements SubCategoryServiceClient.
type subCategoryServiceClient struct {
	create *connect.Client[v1.SubCategoryServiceCreateRequest, v1.SubCategoryServiceCreateResponse]
	read   *connect.Client[v1.SubCategoryServiceReadRequest, v1.SubCategoryServiceReadResponse]
	update *connect.Client[v1.SubCategoryServiceUpdateRequest, v1.SubCategoryServiceUpdateResponse]
	delete *connect.Client[v1.SubCategoryServiceDeleteRequest, v1.SubCategoryServiceDeleteResponse]
}

// Create calls listah.v1.SubCategoryService.Create.
func (c *subCategoryServiceClient) Create(ctx context.Context, req *connect.Request[v1.SubCategoryServiceCreateRequest]) (*connect.Response[v1.SubCategoryServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Read calls listah.v1.SubCategoryService.Read.
func (c *subCategoryServiceClient) Read(ctx context.Context, req *connect.Request[v1.SubCategoryServiceReadRequest]) (*connect.Response[v1.SubCategoryServiceReadResponse], error) {
	return c.read.CallUnary(ctx, req)
}

// Update calls listah.v1.SubCategoryService.Update.
func (c *subCategoryServiceClient) Update(ctx context.Context, req *connect.Request[v1.SubCategoryServiceUpdateRequest]) (*connect.Response[v1.SubCategoryServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls listah.v1.SubCategoryService.Delete.
func (c *subCategoryServiceClient) Delete(ctx context.Context, req *connect.Request[v1.SubCategoryServiceDeleteRequest]) (*connect.Response[v1.SubCategoryServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// SubCategoryServiceHandler is an implementation of the listah.v1.SubCategoryService service.
type SubCategoryServiceHandler interface {
	Create(context.Context, *connect.Request[v1.SubCategoryServiceCreateRequest]) (*connect.Response[v1.SubCategoryServiceCreateResponse], error)
	Read(context.Context, *connect.Request[v1.SubCategoryServiceReadRequest]) (*connect.Response[v1.SubCategoryServiceReadResponse], error)
	Update(context.Context, *connect.Request[v1.SubCategoryServiceUpdateRequest]) (*connect.Response[v1.SubCategoryServiceUpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.SubCategoryServiceDeleteRequest]) (*connect.Response[v1.SubCategoryServiceDeleteResponse], error)
}

// NewSubCategoryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubCategoryServiceHandler(svc SubCategoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	subCategoryServiceCreateHandler := connect.NewUnaryHandler(
		SubCategoryServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(subCategoryServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subCategoryServiceReadHandler := connect.NewUnaryHandler(
		SubCategoryServiceReadProcedure,
		svc.Read,
		connect.WithSchema(subCategoryServiceReadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subCategoryServiceUpdateHandler := connect.NewUnaryHandler(
		SubCategoryServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(subCategoryServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	subCategoryServiceDeleteHandler := connect.NewUnaryHandler(
		SubCategoryServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(subCategoryServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/listah.v1.SubCategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubCategoryServiceCreateProcedure:
			subCategoryServiceCreateHandler.ServeHTTP(w, r)
		case SubCategoryServiceReadProcedure:
			subCategoryServiceReadHandler.ServeHTTP(w, r)
		case SubCategoryServiceUpdateProcedure:
			subCategoryServiceUpdateHandler.ServeHTTP(w, r)
		case SubCategoryServiceDeleteProcedure:
			subCategoryServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubCategoryServiceHandler struct{}

func (UnimplementedSubCategoryServiceHandler) Create(context.Context, *connect.Request[v1.SubCategoryServiceCreateRequest]) (*connect.Response[v1.SubCategoryServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.SubCategoryService.Create is not implemented"))
}

func (UnimplementedSubCategoryServiceHandler) Read(context.Context, *connect.Request[v1.SubCategoryServiceReadRequest]) (*connect.Response[v1.SubCategoryServiceReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.SubCategoryService.Read is not implemented"))
}

func (UnimplementedSubCategoryServiceHandler) Update(context.Context, *connect.Request[v1.SubCategoryServiceUpdateRequest]) (*connect.Response[v1.SubCategoryServiceUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.SubCategoryService.Update is not implemented"))
}

func (UnimplementedSubCategoryServiceHandler) Delete(context.Context, *connect.Request[v1.SubCategoryServiceDeleteRequest]) (*connect.Response[v1.SubCategoryServiceDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.SubCategoryService.Delete is not implemented"))
}
