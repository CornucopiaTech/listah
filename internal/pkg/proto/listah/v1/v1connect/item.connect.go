// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: listah/v1/item.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "cornucopia/listah/internal/pkg/proto/listah/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ItemServiceName is the fully-qualified name of the ItemService service.
	ItemServiceName = "listah.v1.ItemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ItemServiceCreateOneProcedure is the fully-qualified name of the ItemService's CreateOne RPC.
	ItemServiceCreateOneProcedure = "/listah.v1.ItemService/CreateOne"
	// ItemServiceCreateManyProcedure is the fully-qualified name of the ItemService's CreateMany RPC.
	ItemServiceCreateManyProcedure = "/listah.v1.ItemService/CreateMany"
	// ItemServiceReadOneProcedure is the fully-qualified name of the ItemService's ReadOne RPC.
	ItemServiceReadOneProcedure = "/listah.v1.ItemService/ReadOne"
	// ItemServiceReadManyProcedure is the fully-qualified name of the ItemService's ReadMany RPC.
	ItemServiceReadManyProcedure = "/listah.v1.ItemService/ReadMany"
	// ItemServiceUpdateOneProcedure is the fully-qualified name of the ItemService's UpdateOne RPC.
	ItemServiceUpdateOneProcedure = "/listah.v1.ItemService/UpdateOne"
	// ItemServiceUpdateManyProcedure is the fully-qualified name of the ItemService's UpdateMany RPC.
	ItemServiceUpdateManyProcedure = "/listah.v1.ItemService/UpdateMany"
	// ItemServiceDeleteOneProcedure is the fully-qualified name of the ItemService's DeleteOne RPC.
	ItemServiceDeleteOneProcedure = "/listah.v1.ItemService/DeleteOne"
	// ItemServiceDeleteManyProcedure is the fully-qualified name of the ItemService's DeleteMany RPC.
	ItemServiceDeleteManyProcedure = "/listah.v1.ItemService/DeleteMany"
	// ItemServiceListProcedure is the fully-qualified name of the ItemService's List RPC.
	ItemServiceListProcedure = "/listah.v1.ItemService/List"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	itemServiceServiceDescriptor          = v1.File_listah_v1_item_proto.Services().ByName("ItemService")
	itemServiceCreateOneMethodDescriptor  = itemServiceServiceDescriptor.Methods().ByName("CreateOne")
	itemServiceCreateManyMethodDescriptor = itemServiceServiceDescriptor.Methods().ByName("CreateMany")
	itemServiceReadOneMethodDescriptor    = itemServiceServiceDescriptor.Methods().ByName("ReadOne")
	itemServiceReadManyMethodDescriptor   = itemServiceServiceDescriptor.Methods().ByName("ReadMany")
	itemServiceUpdateOneMethodDescriptor  = itemServiceServiceDescriptor.Methods().ByName("UpdateOne")
	itemServiceUpdateManyMethodDescriptor = itemServiceServiceDescriptor.Methods().ByName("UpdateMany")
	itemServiceDeleteOneMethodDescriptor  = itemServiceServiceDescriptor.Methods().ByName("DeleteOne")
	itemServiceDeleteManyMethodDescriptor = itemServiceServiceDescriptor.Methods().ByName("DeleteMany")
	itemServiceListMethodDescriptor       = itemServiceServiceDescriptor.Methods().ByName("List")
)

// ItemServiceClient is a client for the listah.v1.ItemService service.
type ItemServiceClient interface {
	CreateOne(context.Context, *connect.Request[v1.ItemServiceCreateOneRequest]) (*connect.Response[v1.ItemServiceCreateOneResponse], error)
	CreateMany(context.Context, *connect.Request[v1.ItemServiceCreateManyRequest]) (*connect.Response[v1.ItemServiceCreateManyResponse], error)
	ReadOne(context.Context, *connect.Request[v1.ItemServiceReadOneRequest]) (*connect.Response[v1.ItemServiceReadOneResponse], error)
	ReadMany(context.Context, *connect.Request[v1.ItemServiceReadManyRequest]) (*connect.Response[v1.ItemServiceReadManyResponse], error)
	UpdateOne(context.Context, *connect.Request[v1.ItemServiceUpdateOneRequest]) (*connect.Response[v1.ItemServiceUpdateOneResponse], error)
	UpdateMany(context.Context, *connect.Request[v1.ItemServiceUpdateManyRequest]) (*connect.Response[v1.ItemServiceUpdateManyResponse], error)
	DeleteOne(context.Context, *connect.Request[v1.ItemServiceDeleteOneRequest]) (*connect.Response[v1.ItemServiceDeleteOneResponse], error)
	DeleteMany(context.Context, *connect.Request[v1.ItemServiceDeleteManyRequest]) (*connect.Response[v1.ItemServiceDeleteManyResponse], error)
	List(context.Context, *connect.Request[v1.ItemServiceListRequest]) (*connect.Response[v1.ItemServiceListResponse], error)
}

// NewItemServiceClient constructs a client for the listah.v1.ItemService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewItemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ItemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &itemServiceClient{
		createOne: connect.NewClient[v1.ItemServiceCreateOneRequest, v1.ItemServiceCreateOneResponse](
			httpClient,
			baseURL+ItemServiceCreateOneProcedure,
			connect.WithSchema(itemServiceCreateOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createMany: connect.NewClient[v1.ItemServiceCreateManyRequest, v1.ItemServiceCreateManyResponse](
			httpClient,
			baseURL+ItemServiceCreateManyProcedure,
			connect.WithSchema(itemServiceCreateManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readOne: connect.NewClient[v1.ItemServiceReadOneRequest, v1.ItemServiceReadOneResponse](
			httpClient,
			baseURL+ItemServiceReadOneProcedure,
			connect.WithSchema(itemServiceReadOneMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		readMany: connect.NewClient[v1.ItemServiceReadManyRequest, v1.ItemServiceReadManyResponse](
			httpClient,
			baseURL+ItemServiceReadManyProcedure,
			connect.WithSchema(itemServiceReadManyMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateOne: connect.NewClient[v1.ItemServiceUpdateOneRequest, v1.ItemServiceUpdateOneResponse](
			httpClient,
			baseURL+ItemServiceUpdateOneProcedure,
			connect.WithSchema(itemServiceUpdateOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateMany: connect.NewClient[v1.ItemServiceUpdateManyRequest, v1.ItemServiceUpdateManyResponse](
			httpClient,
			baseURL+ItemServiceUpdateManyProcedure,
			connect.WithSchema(itemServiceUpdateManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOne: connect.NewClient[v1.ItemServiceDeleteOneRequest, v1.ItemServiceDeleteOneResponse](
			httpClient,
			baseURL+ItemServiceDeleteOneProcedure,
			connect.WithSchema(itemServiceDeleteOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteMany: connect.NewClient[v1.ItemServiceDeleteManyRequest, v1.ItemServiceDeleteManyResponse](
			httpClient,
			baseURL+ItemServiceDeleteManyProcedure,
			connect.WithSchema(itemServiceDeleteManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.ItemServiceListRequest, v1.ItemServiceListResponse](
			httpClient,
			baseURL+ItemServiceListProcedure,
			connect.WithSchema(itemServiceListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// itemServiceClient implements ItemServiceClient.
type itemServiceClient struct {
	createOne  *connect.Client[v1.ItemServiceCreateOneRequest, v1.ItemServiceCreateOneResponse]
	createMany *connect.Client[v1.ItemServiceCreateManyRequest, v1.ItemServiceCreateManyResponse]
	readOne    *connect.Client[v1.ItemServiceReadOneRequest, v1.ItemServiceReadOneResponse]
	readMany   *connect.Client[v1.ItemServiceReadManyRequest, v1.ItemServiceReadManyResponse]
	updateOne  *connect.Client[v1.ItemServiceUpdateOneRequest, v1.ItemServiceUpdateOneResponse]
	updateMany *connect.Client[v1.ItemServiceUpdateManyRequest, v1.ItemServiceUpdateManyResponse]
	deleteOne  *connect.Client[v1.ItemServiceDeleteOneRequest, v1.ItemServiceDeleteOneResponse]
	deleteMany *connect.Client[v1.ItemServiceDeleteManyRequest, v1.ItemServiceDeleteManyResponse]
	list       *connect.Client[v1.ItemServiceListRequest, v1.ItemServiceListResponse]
}

// CreateOne calls listah.v1.ItemService.CreateOne.
func (c *itemServiceClient) CreateOne(ctx context.Context, req *connect.Request[v1.ItemServiceCreateOneRequest]) (*connect.Response[v1.ItemServiceCreateOneResponse], error) {
	return c.createOne.CallUnary(ctx, req)
}

// CreateMany calls listah.v1.ItemService.CreateMany.
func (c *itemServiceClient) CreateMany(ctx context.Context, req *connect.Request[v1.ItemServiceCreateManyRequest]) (*connect.Response[v1.ItemServiceCreateManyResponse], error) {
	return c.createMany.CallUnary(ctx, req)
}

// ReadOne calls listah.v1.ItemService.ReadOne.
func (c *itemServiceClient) ReadOne(ctx context.Context, req *connect.Request[v1.ItemServiceReadOneRequest]) (*connect.Response[v1.ItemServiceReadOneResponse], error) {
	return c.readOne.CallUnary(ctx, req)
}

// ReadMany calls listah.v1.ItemService.ReadMany.
func (c *itemServiceClient) ReadMany(ctx context.Context, req *connect.Request[v1.ItemServiceReadManyRequest]) (*connect.Response[v1.ItemServiceReadManyResponse], error) {
	return c.readMany.CallUnary(ctx, req)
}

// UpdateOne calls listah.v1.ItemService.UpdateOne.
func (c *itemServiceClient) UpdateOne(ctx context.Context, req *connect.Request[v1.ItemServiceUpdateOneRequest]) (*connect.Response[v1.ItemServiceUpdateOneResponse], error) {
	return c.updateOne.CallUnary(ctx, req)
}

// UpdateMany calls listah.v1.ItemService.UpdateMany.
func (c *itemServiceClient) UpdateMany(ctx context.Context, req *connect.Request[v1.ItemServiceUpdateManyRequest]) (*connect.Response[v1.ItemServiceUpdateManyResponse], error) {
	return c.updateMany.CallUnary(ctx, req)
}

// DeleteOne calls listah.v1.ItemService.DeleteOne.
func (c *itemServiceClient) DeleteOne(ctx context.Context, req *connect.Request[v1.ItemServiceDeleteOneRequest]) (*connect.Response[v1.ItemServiceDeleteOneResponse], error) {
	return c.deleteOne.CallUnary(ctx, req)
}

// DeleteMany calls listah.v1.ItemService.DeleteMany.
func (c *itemServiceClient) DeleteMany(ctx context.Context, req *connect.Request[v1.ItemServiceDeleteManyRequest]) (*connect.Response[v1.ItemServiceDeleteManyResponse], error) {
	return c.deleteMany.CallUnary(ctx, req)
}

// List calls listah.v1.ItemService.List.
func (c *itemServiceClient) List(ctx context.Context, req *connect.Request[v1.ItemServiceListRequest]) (*connect.Response[v1.ItemServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// ItemServiceHandler is an implementation of the listah.v1.ItemService service.
type ItemServiceHandler interface {
	CreateOne(context.Context, *connect.Request[v1.ItemServiceCreateOneRequest]) (*connect.Response[v1.ItemServiceCreateOneResponse], error)
	CreateMany(context.Context, *connect.Request[v1.ItemServiceCreateManyRequest]) (*connect.Response[v1.ItemServiceCreateManyResponse], error)
	ReadOne(context.Context, *connect.Request[v1.ItemServiceReadOneRequest]) (*connect.Response[v1.ItemServiceReadOneResponse], error)
	ReadMany(context.Context, *connect.Request[v1.ItemServiceReadManyRequest]) (*connect.Response[v1.ItemServiceReadManyResponse], error)
	UpdateOne(context.Context, *connect.Request[v1.ItemServiceUpdateOneRequest]) (*connect.Response[v1.ItemServiceUpdateOneResponse], error)
	UpdateMany(context.Context, *connect.Request[v1.ItemServiceUpdateManyRequest]) (*connect.Response[v1.ItemServiceUpdateManyResponse], error)
	DeleteOne(context.Context, *connect.Request[v1.ItemServiceDeleteOneRequest]) (*connect.Response[v1.ItemServiceDeleteOneResponse], error)
	DeleteMany(context.Context, *connect.Request[v1.ItemServiceDeleteManyRequest]) (*connect.Response[v1.ItemServiceDeleteManyResponse], error)
	List(context.Context, *connect.Request[v1.ItemServiceListRequest]) (*connect.Response[v1.ItemServiceListResponse], error)
}

// NewItemServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewItemServiceHandler(svc ItemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	itemServiceCreateOneHandler := connect.NewUnaryHandler(
		ItemServiceCreateOneProcedure,
		svc.CreateOne,
		connect.WithSchema(itemServiceCreateOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceCreateManyHandler := connect.NewUnaryHandler(
		ItemServiceCreateManyProcedure,
		svc.CreateMany,
		connect.WithSchema(itemServiceCreateManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceReadOneHandler := connect.NewUnaryHandler(
		ItemServiceReadOneProcedure,
		svc.ReadOne,
		connect.WithSchema(itemServiceReadOneMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceReadManyHandler := connect.NewUnaryHandler(
		ItemServiceReadManyProcedure,
		svc.ReadMany,
		connect.WithSchema(itemServiceReadManyMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceUpdateOneHandler := connect.NewUnaryHandler(
		ItemServiceUpdateOneProcedure,
		svc.UpdateOne,
		connect.WithSchema(itemServiceUpdateOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceUpdateManyHandler := connect.NewUnaryHandler(
		ItemServiceUpdateManyProcedure,
		svc.UpdateMany,
		connect.WithSchema(itemServiceUpdateManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceDeleteOneHandler := connect.NewUnaryHandler(
		ItemServiceDeleteOneProcedure,
		svc.DeleteOne,
		connect.WithSchema(itemServiceDeleteOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceDeleteManyHandler := connect.NewUnaryHandler(
		ItemServiceDeleteManyProcedure,
		svc.DeleteMany,
		connect.WithSchema(itemServiceDeleteManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemServiceListHandler := connect.NewUnaryHandler(
		ItemServiceListProcedure,
		svc.List,
		connect.WithSchema(itemServiceListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/listah.v1.ItemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ItemServiceCreateOneProcedure:
			itemServiceCreateOneHandler.ServeHTTP(w, r)
		case ItemServiceCreateManyProcedure:
			itemServiceCreateManyHandler.ServeHTTP(w, r)
		case ItemServiceReadOneProcedure:
			itemServiceReadOneHandler.ServeHTTP(w, r)
		case ItemServiceReadManyProcedure:
			itemServiceReadManyHandler.ServeHTTP(w, r)
		case ItemServiceUpdateOneProcedure:
			itemServiceUpdateOneHandler.ServeHTTP(w, r)
		case ItemServiceUpdateManyProcedure:
			itemServiceUpdateManyHandler.ServeHTTP(w, r)
		case ItemServiceDeleteOneProcedure:
			itemServiceDeleteOneHandler.ServeHTTP(w, r)
		case ItemServiceDeleteManyProcedure:
			itemServiceDeleteManyHandler.ServeHTTP(w, r)
		case ItemServiceListProcedure:
			itemServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedItemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedItemServiceHandler struct{}

func (UnimplementedItemServiceHandler) CreateOne(context.Context, *connect.Request[v1.ItemServiceCreateOneRequest]) (*connect.Response[v1.ItemServiceCreateOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.ItemService.CreateOne is not implemented"))
}

func (UnimplementedItemServiceHandler) CreateMany(context.Context, *connect.Request[v1.ItemServiceCreateManyRequest]) (*connect.Response[v1.ItemServiceCreateManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.ItemService.CreateMany is not implemented"))
}

func (UnimplementedItemServiceHandler) ReadOne(context.Context, *connect.Request[v1.ItemServiceReadOneRequest]) (*connect.Response[v1.ItemServiceReadOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.ItemService.ReadOne is not implemented"))
}

func (UnimplementedItemServiceHandler) ReadMany(context.Context, *connect.Request[v1.ItemServiceReadManyRequest]) (*connect.Response[v1.ItemServiceReadManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.ItemService.ReadMany is not implemented"))
}

func (UnimplementedItemServiceHandler) UpdateOne(context.Context, *connect.Request[v1.ItemServiceUpdateOneRequest]) (*connect.Response[v1.ItemServiceUpdateOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.ItemService.UpdateOne is not implemented"))
}

func (UnimplementedItemServiceHandler) UpdateMany(context.Context, *connect.Request[v1.ItemServiceUpdateManyRequest]) (*connect.Response[v1.ItemServiceUpdateManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.ItemService.UpdateMany is not implemented"))
}

func (UnimplementedItemServiceHandler) DeleteOne(context.Context, *connect.Request[v1.ItemServiceDeleteOneRequest]) (*connect.Response[v1.ItemServiceDeleteOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.ItemService.DeleteOne is not implemented"))
}

func (UnimplementedItemServiceHandler) DeleteMany(context.Context, *connect.Request[v1.ItemServiceDeleteManyRequest]) (*connect.Response[v1.ItemServiceDeleteManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.ItemService.DeleteMany is not implemented"))
}

func (UnimplementedItemServiceHandler) List(context.Context, *connect.Request[v1.ItemServiceListRequest]) (*connect.Response[v1.ItemServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.ItemService.List is not implemented"))
}
