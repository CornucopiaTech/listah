// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: listah/v1/user.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "cornucopia/listah/internal/pkg/proto/listah/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "listah.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceCreateOneProcedure is the fully-qualified name of the UserService's CreateOne RPC.
	UserServiceCreateOneProcedure = "/listah.v1.UserService/CreateOne"
	// UserServiceCreateManyProcedure is the fully-qualified name of the UserService's CreateMany RPC.
	UserServiceCreateManyProcedure = "/listah.v1.UserService/CreateMany"
	// UserServiceReadOneProcedure is the fully-qualified name of the UserService's ReadOne RPC.
	UserServiceReadOneProcedure = "/listah.v1.UserService/ReadOne"
	// UserServiceReadManyProcedure is the fully-qualified name of the UserService's ReadMany RPC.
	UserServiceReadManyProcedure = "/listah.v1.UserService/ReadMany"
	// UserServiceUpdateOneProcedure is the fully-qualified name of the UserService's UpdateOne RPC.
	UserServiceUpdateOneProcedure = "/listah.v1.UserService/UpdateOne"
	// UserServiceUpdateManyProcedure is the fully-qualified name of the UserService's UpdateMany RPC.
	UserServiceUpdateManyProcedure = "/listah.v1.UserService/UpdateMany"
	// UserServiceDeleteOneProcedure is the fully-qualified name of the UserService's DeleteOne RPC.
	UserServiceDeleteOneProcedure = "/listah.v1.UserService/DeleteOne"
	// UserServiceDeleteManyProcedure is the fully-qualified name of the UserService's DeleteMany RPC.
	UserServiceDeleteManyProcedure = "/listah.v1.UserService/DeleteMany"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceServiceDescriptor          = v1.File_listah_v1_user_proto.Services().ByName("UserService")
	userServiceCreateOneMethodDescriptor  = userServiceServiceDescriptor.Methods().ByName("CreateOne")
	userServiceCreateManyMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("CreateMany")
	userServiceReadOneMethodDescriptor    = userServiceServiceDescriptor.Methods().ByName("ReadOne")
	userServiceReadManyMethodDescriptor   = userServiceServiceDescriptor.Methods().ByName("ReadMany")
	userServiceUpdateOneMethodDescriptor  = userServiceServiceDescriptor.Methods().ByName("UpdateOne")
	userServiceUpdateManyMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("UpdateMany")
	userServiceDeleteOneMethodDescriptor  = userServiceServiceDescriptor.Methods().ByName("DeleteOne")
	userServiceDeleteManyMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("DeleteMany")
)

// UserServiceClient is a client for the listah.v1.UserService service.
type UserServiceClient interface {
	CreateOne(context.Context, *connect.Request[v1.UserServiceCreateOneRequest]) (*connect.Response[v1.UserServiceCreateOneResponse], error)
	CreateMany(context.Context, *connect.Request[v1.UserServiceCreateManyRequest]) (*connect.Response[v1.UserServiceCreateManyResponse], error)
	ReadOne(context.Context, *connect.Request[v1.UserServiceReadOneRequest]) (*connect.Response[v1.UserServiceReadOneResponse], error)
	ReadMany(context.Context, *connect.Request[v1.UserServiceReadManyRequest]) (*connect.Response[v1.UserServiceReadManyResponse], error)
	UpdateOne(context.Context, *connect.Request[v1.UserServiceUpdateOneRequest]) (*connect.Response[v1.UserServiceUpdateOneResponse], error)
	UpdateMany(context.Context, *connect.Request[v1.UserServiceUpdateManyRequest]) (*connect.Response[v1.UserServiceUpdateManyResponse], error)
	DeleteOne(context.Context, *connect.Request[v1.UserServiceDeleteOneRequest]) (*connect.Response[v1.UserServiceDeleteOneResponse], error)
	DeleteMany(context.Context, *connect.Request[v1.UserServiceDeleteManyRequest]) (*connect.Response[v1.UserServiceDeleteManyResponse], error)
}

// NewUserServiceClient constructs a client for the listah.v1.UserService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		createOne: connect.NewClient[v1.UserServiceCreateOneRequest, v1.UserServiceCreateOneResponse](
			httpClient,
			baseURL+UserServiceCreateOneProcedure,
			connect.WithSchema(userServiceCreateOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createMany: connect.NewClient[v1.UserServiceCreateManyRequest, v1.UserServiceCreateManyResponse](
			httpClient,
			baseURL+UserServiceCreateManyProcedure,
			connect.WithSchema(userServiceCreateManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readOne: connect.NewClient[v1.UserServiceReadOneRequest, v1.UserServiceReadOneResponse](
			httpClient,
			baseURL+UserServiceReadOneProcedure,
			connect.WithSchema(userServiceReadOneMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		readMany: connect.NewClient[v1.UserServiceReadManyRequest, v1.UserServiceReadManyResponse](
			httpClient,
			baseURL+UserServiceReadManyProcedure,
			connect.WithSchema(userServiceReadManyMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateOne: connect.NewClient[v1.UserServiceUpdateOneRequest, v1.UserServiceUpdateOneResponse](
			httpClient,
			baseURL+UserServiceUpdateOneProcedure,
			connect.WithSchema(userServiceUpdateOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateMany: connect.NewClient[v1.UserServiceUpdateManyRequest, v1.UserServiceUpdateManyResponse](
			httpClient,
			baseURL+UserServiceUpdateManyProcedure,
			connect.WithSchema(userServiceUpdateManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOne: connect.NewClient[v1.UserServiceDeleteOneRequest, v1.UserServiceDeleteOneResponse](
			httpClient,
			baseURL+UserServiceDeleteOneProcedure,
			connect.WithSchema(userServiceDeleteOneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteMany: connect.NewClient[v1.UserServiceDeleteManyRequest, v1.UserServiceDeleteManyResponse](
			httpClient,
			baseURL+UserServiceDeleteManyProcedure,
			connect.WithSchema(userServiceDeleteManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	createOne  *connect.Client[v1.UserServiceCreateOneRequest, v1.UserServiceCreateOneResponse]
	createMany *connect.Client[v1.UserServiceCreateManyRequest, v1.UserServiceCreateManyResponse]
	readOne    *connect.Client[v1.UserServiceReadOneRequest, v1.UserServiceReadOneResponse]
	readMany   *connect.Client[v1.UserServiceReadManyRequest, v1.UserServiceReadManyResponse]
	updateOne  *connect.Client[v1.UserServiceUpdateOneRequest, v1.UserServiceUpdateOneResponse]
	updateMany *connect.Client[v1.UserServiceUpdateManyRequest, v1.UserServiceUpdateManyResponse]
	deleteOne  *connect.Client[v1.UserServiceDeleteOneRequest, v1.UserServiceDeleteOneResponse]
	deleteMany *connect.Client[v1.UserServiceDeleteManyRequest, v1.UserServiceDeleteManyResponse]
}

// CreateOne calls listah.v1.UserService.CreateOne.
func (c *userServiceClient) CreateOne(ctx context.Context, req *connect.Request[v1.UserServiceCreateOneRequest]) (*connect.Response[v1.UserServiceCreateOneResponse], error) {
	return c.createOne.CallUnary(ctx, req)
}

// CreateMany calls listah.v1.UserService.CreateMany.
func (c *userServiceClient) CreateMany(ctx context.Context, req *connect.Request[v1.UserServiceCreateManyRequest]) (*connect.Response[v1.UserServiceCreateManyResponse], error) {
	return c.createMany.CallUnary(ctx, req)
}

// ReadOne calls listah.v1.UserService.ReadOne.
func (c *userServiceClient) ReadOne(ctx context.Context, req *connect.Request[v1.UserServiceReadOneRequest]) (*connect.Response[v1.UserServiceReadOneResponse], error) {
	return c.readOne.CallUnary(ctx, req)
}

// ReadMany calls listah.v1.UserService.ReadMany.
func (c *userServiceClient) ReadMany(ctx context.Context, req *connect.Request[v1.UserServiceReadManyRequest]) (*connect.Response[v1.UserServiceReadManyResponse], error) {
	return c.readMany.CallUnary(ctx, req)
}

// UpdateOne calls listah.v1.UserService.UpdateOne.
func (c *userServiceClient) UpdateOne(ctx context.Context, req *connect.Request[v1.UserServiceUpdateOneRequest]) (*connect.Response[v1.UserServiceUpdateOneResponse], error) {
	return c.updateOne.CallUnary(ctx, req)
}

// UpdateMany calls listah.v1.UserService.UpdateMany.
func (c *userServiceClient) UpdateMany(ctx context.Context, req *connect.Request[v1.UserServiceUpdateManyRequest]) (*connect.Response[v1.UserServiceUpdateManyResponse], error) {
	return c.updateMany.CallUnary(ctx, req)
}

// DeleteOne calls listah.v1.UserService.DeleteOne.
func (c *userServiceClient) DeleteOne(ctx context.Context, req *connect.Request[v1.UserServiceDeleteOneRequest]) (*connect.Response[v1.UserServiceDeleteOneResponse], error) {
	return c.deleteOne.CallUnary(ctx, req)
}

// DeleteMany calls listah.v1.UserService.DeleteMany.
func (c *userServiceClient) DeleteMany(ctx context.Context, req *connect.Request[v1.UserServiceDeleteManyRequest]) (*connect.Response[v1.UserServiceDeleteManyResponse], error) {
	return c.deleteMany.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the listah.v1.UserService service.
type UserServiceHandler interface {
	CreateOne(context.Context, *connect.Request[v1.UserServiceCreateOneRequest]) (*connect.Response[v1.UserServiceCreateOneResponse], error)
	CreateMany(context.Context, *connect.Request[v1.UserServiceCreateManyRequest]) (*connect.Response[v1.UserServiceCreateManyResponse], error)
	ReadOne(context.Context, *connect.Request[v1.UserServiceReadOneRequest]) (*connect.Response[v1.UserServiceReadOneResponse], error)
	ReadMany(context.Context, *connect.Request[v1.UserServiceReadManyRequest]) (*connect.Response[v1.UserServiceReadManyResponse], error)
	UpdateOne(context.Context, *connect.Request[v1.UserServiceUpdateOneRequest]) (*connect.Response[v1.UserServiceUpdateOneResponse], error)
	UpdateMany(context.Context, *connect.Request[v1.UserServiceUpdateManyRequest]) (*connect.Response[v1.UserServiceUpdateManyResponse], error)
	DeleteOne(context.Context, *connect.Request[v1.UserServiceDeleteOneRequest]) (*connect.Response[v1.UserServiceDeleteOneResponse], error)
	DeleteMany(context.Context, *connect.Request[v1.UserServiceDeleteManyRequest]) (*connect.Response[v1.UserServiceDeleteManyResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceCreateOneHandler := connect.NewUnaryHandler(
		UserServiceCreateOneProcedure,
		svc.CreateOne,
		connect.WithSchema(userServiceCreateOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreateManyHandler := connect.NewUnaryHandler(
		UserServiceCreateManyProcedure,
		svc.CreateMany,
		connect.WithSchema(userServiceCreateManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceReadOneHandler := connect.NewUnaryHandler(
		UserServiceReadOneProcedure,
		svc.ReadOne,
		connect.WithSchema(userServiceReadOneMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	userServiceReadManyHandler := connect.NewUnaryHandler(
		UserServiceReadManyProcedure,
		svc.ReadMany,
		connect.WithSchema(userServiceReadManyMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateOneHandler := connect.NewUnaryHandler(
		UserServiceUpdateOneProcedure,
		svc.UpdateOne,
		connect.WithSchema(userServiceUpdateOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateManyHandler := connect.NewUnaryHandler(
		UserServiceUpdateManyProcedure,
		svc.UpdateMany,
		connect.WithSchema(userServiceUpdateManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteOneHandler := connect.NewUnaryHandler(
		UserServiceDeleteOneProcedure,
		svc.DeleteOne,
		connect.WithSchema(userServiceDeleteOneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteManyHandler := connect.NewUnaryHandler(
		UserServiceDeleteManyProcedure,
		svc.DeleteMany,
		connect.WithSchema(userServiceDeleteManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/listah.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceCreateOneProcedure:
			userServiceCreateOneHandler.ServeHTTP(w, r)
		case UserServiceCreateManyProcedure:
			userServiceCreateManyHandler.ServeHTTP(w, r)
		case UserServiceReadOneProcedure:
			userServiceReadOneHandler.ServeHTTP(w, r)
		case UserServiceReadManyProcedure:
			userServiceReadManyHandler.ServeHTTP(w, r)
		case UserServiceUpdateOneProcedure:
			userServiceUpdateOneHandler.ServeHTTP(w, r)
		case UserServiceUpdateManyProcedure:
			userServiceUpdateManyHandler.ServeHTTP(w, r)
		case UserServiceDeleteOneProcedure:
			userServiceDeleteOneHandler.ServeHTTP(w, r)
		case UserServiceDeleteManyProcedure:
			userServiceDeleteManyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CreateOne(context.Context, *connect.Request[v1.UserServiceCreateOneRequest]) (*connect.Response[v1.UserServiceCreateOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.UserService.CreateOne is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateMany(context.Context, *connect.Request[v1.UserServiceCreateManyRequest]) (*connect.Response[v1.UserServiceCreateManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.UserService.CreateMany is not implemented"))
}

func (UnimplementedUserServiceHandler) ReadOne(context.Context, *connect.Request[v1.UserServiceReadOneRequest]) (*connect.Response[v1.UserServiceReadOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.UserService.ReadOne is not implemented"))
}

func (UnimplementedUserServiceHandler) ReadMany(context.Context, *connect.Request[v1.UserServiceReadManyRequest]) (*connect.Response[v1.UserServiceReadManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.UserService.ReadMany is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateOne(context.Context, *connect.Request[v1.UserServiceUpdateOneRequest]) (*connect.Response[v1.UserServiceUpdateOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.UserService.UpdateOne is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateMany(context.Context, *connect.Request[v1.UserServiceUpdateManyRequest]) (*connect.Response[v1.UserServiceUpdateManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.UserService.UpdateMany is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteOne(context.Context, *connect.Request[v1.UserServiceDeleteOneRequest]) (*connect.Response[v1.UserServiceDeleteOneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.UserService.DeleteOne is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteMany(context.Context, *connect.Request[v1.UserServiceDeleteManyRequest]) (*connect.Response[v1.UserServiceDeleteManyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("listah.v1.UserService.DeleteMany is not implemented"))
}
