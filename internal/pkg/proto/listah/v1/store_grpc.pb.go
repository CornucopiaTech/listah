// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: listah/v1/store.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StoreService_CreateOne_FullMethodName  = "/listah.v1.StoreService/CreateOne"
	StoreService_CreateMany_FullMethodName = "/listah.v1.StoreService/CreateMany"
	StoreService_ReadOne_FullMethodName    = "/listah.v1.StoreService/ReadOne"
	StoreService_ReadMany_FullMethodName   = "/listah.v1.StoreService/ReadMany"
	StoreService_UpdateOne_FullMethodName  = "/listah.v1.StoreService/UpdateOne"
	StoreService_UpdateMany_FullMethodName = "/listah.v1.StoreService/UpdateMany"
	StoreService_DeleteOne_FullMethodName  = "/listah.v1.StoreService/DeleteOne"
	StoreService_DeleteMany_FullMethodName = "/listah.v1.StoreService/DeleteMany"
	StoreService_ListItems_FullMethodName  = "/listah.v1.StoreService/ListItems"
)

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreServiceClient interface {
	CreateOne(ctx context.Context, in *StoreServiceCreateOneRequest, opts ...grpc.CallOption) (*StoreServiceCreateOneResponse, error)
	CreateMany(ctx context.Context, in *StoreServiceCreateManyRequest, opts ...grpc.CallOption) (*StoreServiceCreateManyResponse, error)
	ReadOne(ctx context.Context, in *StoreServiceReadOneRequest, opts ...grpc.CallOption) (*StoreServiceReadOneResponse, error)
	ReadMany(ctx context.Context, in *StoreServiceReadManyRequest, opts ...grpc.CallOption) (*StoreServiceReadManyResponse, error)
	UpdateOne(ctx context.Context, in *StoreServiceUpdateOneRequest, opts ...grpc.CallOption) (*StoreServiceUpdateOneResponse, error)
	UpdateMany(ctx context.Context, in *StoreServiceUpdateManyRequest, opts ...grpc.CallOption) (*StoreServiceUpdateManyResponse, error)
	DeleteOne(ctx context.Context, in *StoreServiceDeleteOneRequest, opts ...grpc.CallOption) (*StoreServiceDeleteOneResponse, error)
	DeleteMany(ctx context.Context, in *StoreServiceDeleteManyRequest, opts ...grpc.CallOption) (*StoreServiceDeleteManyResponse, error)
	ListItems(ctx context.Context, in *StoreServiceListItemsRequest, opts ...grpc.CallOption) (*StoreServiceListItemsResponse, error)
}

type storeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceClient(cc grpc.ClientConnInterface) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) CreateOne(ctx context.Context, in *StoreServiceCreateOneRequest, opts ...grpc.CallOption) (*StoreServiceCreateOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreServiceCreateOneResponse)
	err := c.cc.Invoke(ctx, StoreService_CreateOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) CreateMany(ctx context.Context, in *StoreServiceCreateManyRequest, opts ...grpc.CallOption) (*StoreServiceCreateManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreServiceCreateManyResponse)
	err := c.cc.Invoke(ctx, StoreService_CreateMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ReadOne(ctx context.Context, in *StoreServiceReadOneRequest, opts ...grpc.CallOption) (*StoreServiceReadOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreServiceReadOneResponse)
	err := c.cc.Invoke(ctx, StoreService_ReadOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ReadMany(ctx context.Context, in *StoreServiceReadManyRequest, opts ...grpc.CallOption) (*StoreServiceReadManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreServiceReadManyResponse)
	err := c.cc.Invoke(ctx, StoreService_ReadMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) UpdateOne(ctx context.Context, in *StoreServiceUpdateOneRequest, opts ...grpc.CallOption) (*StoreServiceUpdateOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreServiceUpdateOneResponse)
	err := c.cc.Invoke(ctx, StoreService_UpdateOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) UpdateMany(ctx context.Context, in *StoreServiceUpdateManyRequest, opts ...grpc.CallOption) (*StoreServiceUpdateManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreServiceUpdateManyResponse)
	err := c.cc.Invoke(ctx, StoreService_UpdateMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) DeleteOne(ctx context.Context, in *StoreServiceDeleteOneRequest, opts ...grpc.CallOption) (*StoreServiceDeleteOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreServiceDeleteOneResponse)
	err := c.cc.Invoke(ctx, StoreService_DeleteOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) DeleteMany(ctx context.Context, in *StoreServiceDeleteManyRequest, opts ...grpc.CallOption) (*StoreServiceDeleteManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreServiceDeleteManyResponse)
	err := c.cc.Invoke(ctx, StoreService_DeleteMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ListItems(ctx context.Context, in *StoreServiceListItemsRequest, opts ...grpc.CallOption) (*StoreServiceListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreServiceListItemsResponse)
	err := c.cc.Invoke(ctx, StoreService_ListItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceServer is the server API for StoreService service.
// All implementations should embed UnimplementedStoreServiceServer
// for forward compatibility
type StoreServiceServer interface {
	CreateOne(context.Context, *StoreServiceCreateOneRequest) (*StoreServiceCreateOneResponse, error)
	CreateMany(context.Context, *StoreServiceCreateManyRequest) (*StoreServiceCreateManyResponse, error)
	ReadOne(context.Context, *StoreServiceReadOneRequest) (*StoreServiceReadOneResponse, error)
	ReadMany(context.Context, *StoreServiceReadManyRequest) (*StoreServiceReadManyResponse, error)
	UpdateOne(context.Context, *StoreServiceUpdateOneRequest) (*StoreServiceUpdateOneResponse, error)
	UpdateMany(context.Context, *StoreServiceUpdateManyRequest) (*StoreServiceUpdateManyResponse, error)
	DeleteOne(context.Context, *StoreServiceDeleteOneRequest) (*StoreServiceDeleteOneResponse, error)
	DeleteMany(context.Context, *StoreServiceDeleteManyRequest) (*StoreServiceDeleteManyResponse, error)
	ListItems(context.Context, *StoreServiceListItemsRequest) (*StoreServiceListItemsResponse, error)
}

// UnimplementedStoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStoreServiceServer struct {
}

func (UnimplementedStoreServiceServer) CreateOne(context.Context, *StoreServiceCreateOneRequest) (*StoreServiceCreateOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOne not implemented")
}
func (UnimplementedStoreServiceServer) CreateMany(context.Context, *StoreServiceCreateManyRequest) (*StoreServiceCreateManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMany not implemented")
}
func (UnimplementedStoreServiceServer) ReadOne(context.Context, *StoreServiceReadOneRequest) (*StoreServiceReadOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOne not implemented")
}
func (UnimplementedStoreServiceServer) ReadMany(context.Context, *StoreServiceReadManyRequest) (*StoreServiceReadManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMany not implemented")
}
func (UnimplementedStoreServiceServer) UpdateOne(context.Context, *StoreServiceUpdateOneRequest) (*StoreServiceUpdateOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOne not implemented")
}
func (UnimplementedStoreServiceServer) UpdateMany(context.Context, *StoreServiceUpdateManyRequest) (*StoreServiceUpdateManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMany not implemented")
}
func (UnimplementedStoreServiceServer) DeleteOne(context.Context, *StoreServiceDeleteOneRequest) (*StoreServiceDeleteOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOne not implemented")
}
func (UnimplementedStoreServiceServer) DeleteMany(context.Context, *StoreServiceDeleteManyRequest) (*StoreServiceDeleteManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMany not implemented")
}
func (UnimplementedStoreServiceServer) ListItems(context.Context, *StoreServiceListItemsRequest) (*StoreServiceListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}

// UnsafeStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceServer will
// result in compilation errors.
type UnsafeStoreServiceServer interface {
	mustEmbedUnimplementedStoreServiceServer()
}

func RegisterStoreServiceServer(s grpc.ServiceRegistrar, srv StoreServiceServer) {
	s.RegisterService(&StoreService_ServiceDesc, srv)
}

func _StoreService_CreateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreServiceCreateOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).CreateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_CreateOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).CreateOne(ctx, req.(*StoreServiceCreateOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_CreateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreServiceCreateManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).CreateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_CreateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).CreateMany(ctx, req.(*StoreServiceCreateManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreServiceReadOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ReadOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ReadOne(ctx, req.(*StoreServiceReadOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ReadMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreServiceReadManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ReadMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ReadMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ReadMany(ctx, req.(*StoreServiceReadManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_UpdateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreServiceUpdateOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).UpdateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_UpdateOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).UpdateOne(ctx, req.(*StoreServiceUpdateOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_UpdateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreServiceUpdateManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).UpdateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_UpdateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).UpdateMany(ctx, req.(*StoreServiceUpdateManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_DeleteOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreServiceDeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).DeleteOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_DeleteOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).DeleteOne(ctx, req.(*StoreServiceDeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_DeleteMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreServiceDeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).DeleteMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_DeleteMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).DeleteMany(ctx, req.(*StoreServiceDeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreServiceListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ListItems(ctx, req.(*StoreServiceListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreService_ServiceDesc is the grpc.ServiceDesc for StoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listah.v1.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOne",
			Handler:    _StoreService_CreateOne_Handler,
		},
		{
			MethodName: "CreateMany",
			Handler:    _StoreService_CreateMany_Handler,
		},
		{
			MethodName: "ReadOne",
			Handler:    _StoreService_ReadOne_Handler,
		},
		{
			MethodName: "ReadMany",
			Handler:    _StoreService_ReadMany_Handler,
		},
		{
			MethodName: "UpdateOne",
			Handler:    _StoreService_UpdateOne_Handler,
		},
		{
			MethodName: "UpdateMany",
			Handler:    _StoreService_UpdateMany_Handler,
		},
		{
			MethodName: "DeleteOne",
			Handler:    _StoreService_DeleteOne_Handler,
		},
		{
			MethodName: "DeleteMany",
			Handler:    _StoreService_DeleteMany_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _StoreService_ListItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listah/v1/store.proto",
}
