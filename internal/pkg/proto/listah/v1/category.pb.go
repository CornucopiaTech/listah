// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: listah/v1/category.proto

package v1

import (
	_ "github.com/google/gnostic/openapiv3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CategoryServiceCreateOneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Note          string                 `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Audit         *Audit                 `protobuf:"bytes,50,opt,name=audit,proto3" json:"audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceCreateOneRequest) Reset() {
	*x = CategoryServiceCreateOneRequest{}
	mi := &file_listah_v1_category_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceCreateOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceCreateOneRequest) ProtoMessage() {}

func (x *CategoryServiceCreateOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceCreateOneRequest.ProtoReflect.Descriptor instead.
func (*CategoryServiceCreateOneRequest) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{0}
}

func (x *CategoryServiceCreateOneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CategoryServiceCreateOneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryServiceCreateOneRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CategoryServiceCreateOneRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CategoryServiceCreateOneRequest) GetAudit() *Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type CategoryServiceCreateOneResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Note          string                 `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Audit         *Audit                 `protobuf:"bytes,50,opt,name=audit,proto3" json:"audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceCreateOneResponse) Reset() {
	*x = CategoryServiceCreateOneResponse{}
	mi := &file_listah_v1_category_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceCreateOneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceCreateOneResponse) ProtoMessage() {}

func (x *CategoryServiceCreateOneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceCreateOneResponse.ProtoReflect.Descriptor instead.
func (*CategoryServiceCreateOneResponse) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{1}
}

func (x *CategoryServiceCreateOneResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CategoryServiceCreateOneResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryServiceCreateOneResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CategoryServiceCreateOneResponse) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CategoryServiceCreateOneResponse) GetAudit() *Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type CategoryServiceCreateManyRequest struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Category      []*CategoryServiceCreateOneRequest `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceCreateManyRequest) Reset() {
	*x = CategoryServiceCreateManyRequest{}
	mi := &file_listah_v1_category_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceCreateManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceCreateManyRequest) ProtoMessage() {}

func (x *CategoryServiceCreateManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceCreateManyRequest.ProtoReflect.Descriptor instead.
func (*CategoryServiceCreateManyRequest) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{2}
}

func (x *CategoryServiceCreateManyRequest) GetCategory() []*CategoryServiceCreateOneRequest {
	if x != nil {
		return x.Category
	}
	return nil
}

type CategoryServiceCreateManyResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Category      []*CategoryServiceCreateOneResponse `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceCreateManyResponse) Reset() {
	*x = CategoryServiceCreateManyResponse{}
	mi := &file_listah_v1_category_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceCreateManyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceCreateManyResponse) ProtoMessage() {}

func (x *CategoryServiceCreateManyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceCreateManyResponse.ProtoReflect.Descriptor instead.
func (*CategoryServiceCreateManyResponse) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{3}
}

func (x *CategoryServiceCreateManyResponse) GetCategory() []*CategoryServiceCreateOneResponse {
	if x != nil {
		return x.Category
	}
	return nil
}

type CategoryServiceReadOneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceReadOneRequest) Reset() {
	*x = CategoryServiceReadOneRequest{}
	mi := &file_listah_v1_category_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceReadOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceReadOneRequest) ProtoMessage() {}

func (x *CategoryServiceReadOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceReadOneRequest.ProtoReflect.Descriptor instead.
func (*CategoryServiceReadOneRequest) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{4}
}

func (x *CategoryServiceReadOneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CategoryServiceReadOneResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Note          string                 `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Audit         *Audit                 `protobuf:"bytes,50,opt,name=audit,proto3" json:"audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceReadOneResponse) Reset() {
	*x = CategoryServiceReadOneResponse{}
	mi := &file_listah_v1_category_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceReadOneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceReadOneResponse) ProtoMessage() {}

func (x *CategoryServiceReadOneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceReadOneResponse.ProtoReflect.Descriptor instead.
func (*CategoryServiceReadOneResponse) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{5}
}

func (x *CategoryServiceReadOneResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CategoryServiceReadOneResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryServiceReadOneResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CategoryServiceReadOneResponse) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CategoryServiceReadOneResponse) GetAudit() *Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type CategoryServiceReadManyRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Category      []*CategoryServiceReadOneRequest `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceReadManyRequest) Reset() {
	*x = CategoryServiceReadManyRequest{}
	mi := &file_listah_v1_category_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceReadManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceReadManyRequest) ProtoMessage() {}

func (x *CategoryServiceReadManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceReadManyRequest.ProtoReflect.Descriptor instead.
func (*CategoryServiceReadManyRequest) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{6}
}

func (x *CategoryServiceReadManyRequest) GetCategory() []*CategoryServiceReadOneRequest {
	if x != nil {
		return x.Category
	}
	return nil
}

type CategoryServiceReadManyResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Category      []*CategoryServiceReadOneResponse `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceReadManyResponse) Reset() {
	*x = CategoryServiceReadManyResponse{}
	mi := &file_listah_v1_category_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceReadManyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceReadManyResponse) ProtoMessage() {}

func (x *CategoryServiceReadManyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceReadManyResponse.ProtoReflect.Descriptor instead.
func (*CategoryServiceReadManyResponse) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{7}
}

func (x *CategoryServiceReadManyResponse) GetCategory() []*CategoryServiceReadOneResponse {
	if x != nil {
		return x.Category
	}
	return nil
}

type CategoryServiceUpdateOneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Note          string                 `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Audit         *Audit                 `protobuf:"bytes,50,opt,name=audit,proto3" json:"audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceUpdateOneRequest) Reset() {
	*x = CategoryServiceUpdateOneRequest{}
	mi := &file_listah_v1_category_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceUpdateOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceUpdateOneRequest) ProtoMessage() {}

func (x *CategoryServiceUpdateOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceUpdateOneRequest.ProtoReflect.Descriptor instead.
func (*CategoryServiceUpdateOneRequest) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{8}
}

func (x *CategoryServiceUpdateOneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CategoryServiceUpdateOneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryServiceUpdateOneRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CategoryServiceUpdateOneRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CategoryServiceUpdateOneRequest) GetAudit() *Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type CategoryServiceUpdateOneResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Note          string                 `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Audit         *Audit                 `protobuf:"bytes,50,opt,name=audit,proto3" json:"audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceUpdateOneResponse) Reset() {
	*x = CategoryServiceUpdateOneResponse{}
	mi := &file_listah_v1_category_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceUpdateOneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceUpdateOneResponse) ProtoMessage() {}

func (x *CategoryServiceUpdateOneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceUpdateOneResponse.ProtoReflect.Descriptor instead.
func (*CategoryServiceUpdateOneResponse) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{9}
}

func (x *CategoryServiceUpdateOneResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CategoryServiceUpdateOneResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryServiceUpdateOneResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CategoryServiceUpdateOneResponse) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CategoryServiceUpdateOneResponse) GetAudit() *Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type CategoryServiceUpdateManyRequest struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Category      []*CategoryServiceUpdateOneRequest `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceUpdateManyRequest) Reset() {
	*x = CategoryServiceUpdateManyRequest{}
	mi := &file_listah_v1_category_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceUpdateManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceUpdateManyRequest) ProtoMessage() {}

func (x *CategoryServiceUpdateManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceUpdateManyRequest.ProtoReflect.Descriptor instead.
func (*CategoryServiceUpdateManyRequest) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{10}
}

func (x *CategoryServiceUpdateManyRequest) GetCategory() []*CategoryServiceUpdateOneRequest {
	if x != nil {
		return x.Category
	}
	return nil
}

type CategoryServiceUpdateManyResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Category      []*CategoryServiceUpdateOneResponse `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceUpdateManyResponse) Reset() {
	*x = CategoryServiceUpdateManyResponse{}
	mi := &file_listah_v1_category_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceUpdateManyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceUpdateManyResponse) ProtoMessage() {}

func (x *CategoryServiceUpdateManyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceUpdateManyResponse.ProtoReflect.Descriptor instead.
func (*CategoryServiceUpdateManyResponse) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{11}
}

func (x *CategoryServiceUpdateManyResponse) GetCategory() []*CategoryServiceUpdateOneResponse {
	if x != nil {
		return x.Category
	}
	return nil
}

type CategoryServiceDeleteOneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Audit         *Audit                 `protobuf:"bytes,50,opt,name=audit,proto3" json:"audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceDeleteOneRequest) Reset() {
	*x = CategoryServiceDeleteOneRequest{}
	mi := &file_listah_v1_category_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceDeleteOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceDeleteOneRequest) ProtoMessage() {}

func (x *CategoryServiceDeleteOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceDeleteOneRequest.ProtoReflect.Descriptor instead.
func (*CategoryServiceDeleteOneRequest) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{12}
}

func (x *CategoryServiceDeleteOneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CategoryServiceDeleteOneRequest) GetAudit() *Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type CategoryServiceDeleteOneResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Note          string                 `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Audit         *Audit                 `protobuf:"bytes,50,opt,name=audit,proto3" json:"audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceDeleteOneResponse) Reset() {
	*x = CategoryServiceDeleteOneResponse{}
	mi := &file_listah_v1_category_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceDeleteOneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceDeleteOneResponse) ProtoMessage() {}

func (x *CategoryServiceDeleteOneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceDeleteOneResponse.ProtoReflect.Descriptor instead.
func (*CategoryServiceDeleteOneResponse) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{13}
}

func (x *CategoryServiceDeleteOneResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CategoryServiceDeleteOneResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryServiceDeleteOneResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CategoryServiceDeleteOneResponse) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CategoryServiceDeleteOneResponse) GetAudit() *Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type CategoryServiceDeleteManyRequest struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Category      []*CategoryServiceDeleteOneRequest `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceDeleteManyRequest) Reset() {
	*x = CategoryServiceDeleteManyRequest{}
	mi := &file_listah_v1_category_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceDeleteManyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceDeleteManyRequest) ProtoMessage() {}

func (x *CategoryServiceDeleteManyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceDeleteManyRequest.ProtoReflect.Descriptor instead.
func (*CategoryServiceDeleteManyRequest) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{14}
}

func (x *CategoryServiceDeleteManyRequest) GetCategory() []*CategoryServiceDeleteOneRequest {
	if x != nil {
		return x.Category
	}
	return nil
}

type CategoryServiceDeleteManyResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Category      []*CategoryServiceDeleteOneResponse `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceDeleteManyResponse) Reset() {
	*x = CategoryServiceDeleteManyResponse{}
	mi := &file_listah_v1_category_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceDeleteManyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceDeleteManyResponse) ProtoMessage() {}

func (x *CategoryServiceDeleteManyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceDeleteManyResponse.ProtoReflect.Descriptor instead.
func (*CategoryServiceDeleteManyResponse) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{15}
}

func (x *CategoryServiceDeleteManyResponse) GetCategory() []*CategoryServiceDeleteOneResponse {
	if x != nil {
		return x.Category
	}
	return nil
}

type CategoryServiceListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceListRequest) Reset() {
	*x = CategoryServiceListRequest{}
	mi := &file_listah_v1_category_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceListRequest) ProtoMessage() {}

func (x *CategoryServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceListRequest.ProtoReflect.Descriptor instead.
func (*CategoryServiceListRequest) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{16}
}

func (x *CategoryServiceListRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CategoryServiceListResponse struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Note        string                 `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Items       []string               `protobuf:"bytes,20,rep,name=items,proto3" json:"items,omitempty"`
	// repeated ItemServiceReadOneResponse items = 20;
	Audit         *Audit `protobuf:"bytes,50,opt,name=audit,proto3" json:"audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryServiceListResponse) Reset() {
	*x = CategoryServiceListResponse{}
	mi := &file_listah_v1_category_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryServiceListResponse) ProtoMessage() {}

func (x *CategoryServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listah_v1_category_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryServiceListResponse.ProtoReflect.Descriptor instead.
func (*CategoryServiceListResponse) Descriptor() ([]byte, []int) {
	return file_listah_v1_category_proto_rawDescGZIP(), []int{17}
}

func (x *CategoryServiceListResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CategoryServiceListResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryServiceListResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CategoryServiceListResponse) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CategoryServiceListResponse) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CategoryServiceListResponse) GetAudit() *Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

var File_listah_v1_category_proto protoreflect.FileDescriptor

var file_listah_v1_category_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x61, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x1f,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x22, 0xa4, 0x01, 0x0a, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x22, 0x6a, 0x0a, 0x20, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x22, 0x6c, 0x0a, 0x21, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x22, 0x2f, 0x0a, 0x1d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x1e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x22, 0x66, 0x0a, 0x1e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c,
	0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x22, 0x68, 0x0a, 0x1f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x1f, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x22, 0xa4, 0x01, 0x0a, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x22, 0x6a, 0x0a, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x6c, 0x0a, 0x21, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x22, 0x59, 0x0a, 0x1f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x22, 0xa4, 0x01, 0x0a,
	0x20, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x22, 0x6a, 0x0a, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
	0x6c, 0x0a, 0x21, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x2c, 0x0a,
	0x1a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x1b,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x32, 0x92, 0x09, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x12, 0x2a, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0xba,
	0x47, 0x15, 0x1a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x4f, 0x6e, 0x65, 0x20, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0xba, 0x47, 0x18, 0x1a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x4d,
	0x61, 0x6e, 0x79, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x79,
	0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x65, 0x12, 0x28, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0xba, 0x47, 0x13, 0x1a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x20, 0x4f, 0x6e, 0x65, 0x20, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x90, 0x02, 0x01, 0x12, 0x7f, 0x0a, 0x08, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0xba, 0x47,
	0x16, 0x1a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x20, 0x4d, 0x61, 0x6e, 0x79, 0x20, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x90, 0x02, 0x01, 0x12, 0x7e, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x12, 0x2a, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x18, 0xba, 0x47, 0x15, 0x1a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x4f, 0x6e,
	0x65, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0xba, 0x47, 0x18, 0x1a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x4d, 0x61, 0x6e, 0x79, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x7e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x12, 0x2a,
	0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0xba, 0x47, 0x15, 0x1a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x4f, 0x6e, 0x65, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79,
	0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0xba, 0x47, 0x18,
	0x1a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x4d, 0x61, 0x6e, 0x79, 0x20, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x25, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x17, 0xba, 0x47, 0x11, 0x1a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x90, 0x02, 0x01, 0x42, 0x30, 0x5a, 0x2e, 0x63, 0x6f, 0x72, 0x6e,
	0x75, 0x63, 0x6f, 0x70, 0x69, 0x61, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x68, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_listah_v1_category_proto_rawDescOnce sync.Once
	file_listah_v1_category_proto_rawDescData = file_listah_v1_category_proto_rawDesc
)

func file_listah_v1_category_proto_rawDescGZIP() []byte {
	file_listah_v1_category_proto_rawDescOnce.Do(func() {
		file_listah_v1_category_proto_rawDescData = protoimpl.X.CompressGZIP(file_listah_v1_category_proto_rawDescData)
	})
	return file_listah_v1_category_proto_rawDescData
}

var file_listah_v1_category_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_listah_v1_category_proto_goTypes = []any{
	(*CategoryServiceCreateOneRequest)(nil),   // 0: listah.v1.CategoryServiceCreateOneRequest
	(*CategoryServiceCreateOneResponse)(nil),  // 1: listah.v1.CategoryServiceCreateOneResponse
	(*CategoryServiceCreateManyRequest)(nil),  // 2: listah.v1.CategoryServiceCreateManyRequest
	(*CategoryServiceCreateManyResponse)(nil), // 3: listah.v1.CategoryServiceCreateManyResponse
	(*CategoryServiceReadOneRequest)(nil),     // 4: listah.v1.CategoryServiceReadOneRequest
	(*CategoryServiceReadOneResponse)(nil),    // 5: listah.v1.CategoryServiceReadOneResponse
	(*CategoryServiceReadManyRequest)(nil),    // 6: listah.v1.CategoryServiceReadManyRequest
	(*CategoryServiceReadManyResponse)(nil),   // 7: listah.v1.CategoryServiceReadManyResponse
	(*CategoryServiceUpdateOneRequest)(nil),   // 8: listah.v1.CategoryServiceUpdateOneRequest
	(*CategoryServiceUpdateOneResponse)(nil),  // 9: listah.v1.CategoryServiceUpdateOneResponse
	(*CategoryServiceUpdateManyRequest)(nil),  // 10: listah.v1.CategoryServiceUpdateManyRequest
	(*CategoryServiceUpdateManyResponse)(nil), // 11: listah.v1.CategoryServiceUpdateManyResponse
	(*CategoryServiceDeleteOneRequest)(nil),   // 12: listah.v1.CategoryServiceDeleteOneRequest
	(*CategoryServiceDeleteOneResponse)(nil),  // 13: listah.v1.CategoryServiceDeleteOneResponse
	(*CategoryServiceDeleteManyRequest)(nil),  // 14: listah.v1.CategoryServiceDeleteManyRequest
	(*CategoryServiceDeleteManyResponse)(nil), // 15: listah.v1.CategoryServiceDeleteManyResponse
	(*CategoryServiceListRequest)(nil),        // 16: listah.v1.CategoryServiceListRequest
	(*CategoryServiceListResponse)(nil),       // 17: listah.v1.CategoryServiceListResponse
	(*Audit)(nil),                             // 18: listah.v1.Audit
}
var file_listah_v1_category_proto_depIdxs = []int32{
	18, // 0: listah.v1.CategoryServiceCreateOneRequest.audit:type_name -> listah.v1.Audit
	18, // 1: listah.v1.CategoryServiceCreateOneResponse.audit:type_name -> listah.v1.Audit
	0,  // 2: listah.v1.CategoryServiceCreateManyRequest.category:type_name -> listah.v1.CategoryServiceCreateOneRequest
	1,  // 3: listah.v1.CategoryServiceCreateManyResponse.category:type_name -> listah.v1.CategoryServiceCreateOneResponse
	18, // 4: listah.v1.CategoryServiceReadOneResponse.audit:type_name -> listah.v1.Audit
	4,  // 5: listah.v1.CategoryServiceReadManyRequest.category:type_name -> listah.v1.CategoryServiceReadOneRequest
	5,  // 6: listah.v1.CategoryServiceReadManyResponse.category:type_name -> listah.v1.CategoryServiceReadOneResponse
	18, // 7: listah.v1.CategoryServiceUpdateOneRequest.audit:type_name -> listah.v1.Audit
	18, // 8: listah.v1.CategoryServiceUpdateOneResponse.audit:type_name -> listah.v1.Audit
	8,  // 9: listah.v1.CategoryServiceUpdateManyRequest.category:type_name -> listah.v1.CategoryServiceUpdateOneRequest
	9,  // 10: listah.v1.CategoryServiceUpdateManyResponse.category:type_name -> listah.v1.CategoryServiceUpdateOneResponse
	18, // 11: listah.v1.CategoryServiceDeleteOneRequest.audit:type_name -> listah.v1.Audit
	18, // 12: listah.v1.CategoryServiceDeleteOneResponse.audit:type_name -> listah.v1.Audit
	12, // 13: listah.v1.CategoryServiceDeleteManyRequest.category:type_name -> listah.v1.CategoryServiceDeleteOneRequest
	13, // 14: listah.v1.CategoryServiceDeleteManyResponse.category:type_name -> listah.v1.CategoryServiceDeleteOneResponse
	18, // 15: listah.v1.CategoryServiceListResponse.audit:type_name -> listah.v1.Audit
	0,  // 16: listah.v1.CategoryService.CreateOne:input_type -> listah.v1.CategoryServiceCreateOneRequest
	2,  // 17: listah.v1.CategoryService.CreateMany:input_type -> listah.v1.CategoryServiceCreateManyRequest
	4,  // 18: listah.v1.CategoryService.ReadOne:input_type -> listah.v1.CategoryServiceReadOneRequest
	6,  // 19: listah.v1.CategoryService.ReadMany:input_type -> listah.v1.CategoryServiceReadManyRequest
	8,  // 20: listah.v1.CategoryService.UpdateOne:input_type -> listah.v1.CategoryServiceUpdateOneRequest
	10, // 21: listah.v1.CategoryService.UpdateMany:input_type -> listah.v1.CategoryServiceUpdateManyRequest
	12, // 22: listah.v1.CategoryService.DeleteOne:input_type -> listah.v1.CategoryServiceDeleteOneRequest
	14, // 23: listah.v1.CategoryService.DeleteMany:input_type -> listah.v1.CategoryServiceDeleteManyRequest
	16, // 24: listah.v1.CategoryService.List:input_type -> listah.v1.CategoryServiceListRequest
	1,  // 25: listah.v1.CategoryService.CreateOne:output_type -> listah.v1.CategoryServiceCreateOneResponse
	3,  // 26: listah.v1.CategoryService.CreateMany:output_type -> listah.v1.CategoryServiceCreateManyResponse
	5,  // 27: listah.v1.CategoryService.ReadOne:output_type -> listah.v1.CategoryServiceReadOneResponse
	7,  // 28: listah.v1.CategoryService.ReadMany:output_type -> listah.v1.CategoryServiceReadManyResponse
	9,  // 29: listah.v1.CategoryService.UpdateOne:output_type -> listah.v1.CategoryServiceUpdateOneResponse
	11, // 30: listah.v1.CategoryService.UpdateMany:output_type -> listah.v1.CategoryServiceUpdateManyResponse
	13, // 31: listah.v1.CategoryService.DeleteOne:output_type -> listah.v1.CategoryServiceDeleteOneResponse
	15, // 32: listah.v1.CategoryService.DeleteMany:output_type -> listah.v1.CategoryServiceDeleteManyResponse
	17, // 33: listah.v1.CategoryService.List:output_type -> listah.v1.CategoryServiceListResponse
	25, // [25:34] is the sub-list for method output_type
	16, // [16:25] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_listah_v1_category_proto_init() }
func file_listah_v1_category_proto_init() {
	if File_listah_v1_category_proto != nil {
		return
	}
	file_listah_v1_commons_proto_init()
	file_listah_v1_item_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_listah_v1_category_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_listah_v1_category_proto_goTypes,
		DependencyIndexes: file_listah_v1_category_proto_depIdxs,
		MessageInfos:      file_listah_v1_category_proto_msgTypes,
	}.Build()
	File_listah_v1_category_proto = out.File
	file_listah_v1_category_proto_rawDesc = nil
	file_listah_v1_category_proto_goTypes = nil
	file_listah_v1_category_proto_depIdxs = nil
}
