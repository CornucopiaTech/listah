syntax = "proto3";
package listah.v1;


option go_package = "cornucopia/listah/internal/pkg/proto/listah/v1";


import "listah/v1/commons.proto";
import "listah/v1/category.proto";
import "listah/v1/item.proto";
import "google/protobuf/timestamp.proto";
import "gnostic/openapi/v3/annotations.proto";



message StoreServiceCreateOneRequest {
    string id = 1;
    string name = 2;
    string description = 3;
    string note = 7;
    string category_id = 8;
    string category_name = 9;
    Audit audit = 50;
}
message StoreServiceCreateOneResponse {
    string id = 1;
    string name = 2;
    string description = 3;
    string note = 7;
    string category_id = 8;
    string category_name = 9;
    Audit audit = 50;
}
message StoreServiceCreateManyRequest {
    repeated StoreServiceCreateOneRequest store = 1;
}
message StoreServiceCreateManyResponse {
    repeated StoreServiceCreateOneResponse store = 1;
}


message StoreServiceReadOneRequest {
    string id = 1;
}
message StoreServiceReadOneResponse {
    string id = 1;
    string name = 2;
    string description = 3;
    string note = 7;
    string category_id = 8;
    string category_name = 9;
    Audit audit = 50;
}
message StoreServiceReadManyRequest {
    repeated StoreServiceReadOneRequest store = 1;
}
message StoreServiceReadManyResponse {
    repeated StoreServiceReadOneResponse store = 1;
}


message StoreServiceUpdateOneRequest {
    string id = 1;
    string name = 2;
    string description = 3;
    string note = 7;
    string category_id = 8;
    string category_name = 9;
    Audit audit = 50;
}
message StoreServiceUpdateOneResponse {
    string id = 1;
    string name = 2;
    string description = 3;
    string note = 7;
    string category_id = 8;
    string category_name = 9;
    Audit audit = 50;
}
message StoreServiceUpdateManyRequest {
    repeated StoreServiceUpdateOneRequest store = 1;
}
message StoreServiceUpdateManyResponse {
    repeated StoreServiceUpdateOneResponse store = 1;
}


message StoreServiceDeleteOneRequest {
    string id = 1;
    Audit audit = 50;
}
message StoreServiceDeleteOneResponse {
    string id = 1;
    string name = 2;
    string description = 3;
    string note = 7;
    string category = 8;
    Audit audit = 50;
}
message StoreServiceDeleteManyRequest {
    repeated StoreServiceDeleteOneRequest store = 1;
}
message StoreServiceDeleteManyResponse {
    repeated StoreServiceDeleteOneResponse store = 1;
}


message StoreServiceListRequest {
    string id = 1;
}
message StoreServiceListResponse {
    // string id = 1;
    // string name = 2;
    // string description = 3;
    // string note = 7;
    repeated string items = 20;
    // repeated ItemServiceReadOneResponse items = 20;
    // Audit audit = 50;
    // string id = 1;
    // string name = 2;
    // string description = 3;
    // string note = 7;
    // string category = 8;
    //     string category_id = 8;
    string category_name = 9;
    // Audit audit = 50;
}



service StoreService {
    rpc CreateOne(StoreServiceCreateOneRequest) returns (StoreServiceCreateOneResponse){
        option (gnostic.openapi.v3.operation).description = "Create One Store";
    }
    rpc CreateMany(StoreServiceCreateManyRequest) returns (StoreServiceCreateManyResponse){
        option (gnostic.openapi.v3.operation).description = "Create Many Stores";
    }
    rpc ReadOne(StoreServiceReadOneRequest) returns (StoreServiceReadOneResponse){
        option idempotency_level = NO_SIDE_EFFECTS;
        option (gnostic.openapi.v3.operation).description = "Read One Store";
    }
    rpc ReadMany(StoreServiceReadManyRequest) returns (StoreServiceReadManyResponse){
        option idempotency_level=NO_SIDE_EFFECTS;
        option (gnostic.openapi.v3.operation).description = "Read Many Stores";
    }
    rpc UpdateOne(StoreServiceUpdateOneRequest) returns (StoreServiceUpdateOneResponse){
        option (gnostic.openapi.v3.operation).description = "Update One Store";
    }
    rpc UpdateMany(StoreServiceUpdateManyRequest) returns (StoreServiceUpdateManyResponse){
        option (gnostic.openapi.v3.operation).description = "Update Many Stores";
    }
    rpc DeleteOne(StoreServiceDeleteOneRequest) returns (StoreServiceDeleteOneResponse){
        option (gnostic.openapi.v3.operation).description = "Delete One Store";
    }
    rpc DeleteMany(StoreServiceDeleteManyRequest) returns (StoreServiceDeleteManyResponse){
        option (gnostic.openapi.v3.operation).description = "Delete Many Stores";
    }
    rpc List(StoreServiceListRequest) returns (StoreServiceListResponse){
        option idempotency_level=NO_SIDE_EFFECTS;
        option (gnostic.openapi.v3.operation).description = "List Stores";
    }
}
